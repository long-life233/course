# HTML&CSS

- 目录树缩进

indent  

## 快速生成HTML结构语法**

```shell
    div然后tab 			  	就可以生成 <div></div>
    
     div*3       			 生成3个div
     
    父子关系						 > 比如 ul > li就可以
    
    兄弟关系						用 + 就可以了 比如 div+p 
    
    类名或者id					直接写 .demo 或者 #two tab 键就可以了
    
    div有顺序					 可以用 自增符号 $ 
    
    生成标签内部写内容			用 { } 表示
```



## SEO优化

```html
网站TDK  SEO优化
SEO（Search Engine Optimization）汉译为搜索引擎优化，是一种利用搜索引擎的规则提高网站在有关搜索
引擎内自然排名的方式。
SEO 的目的是对网站进行深度的优化，从而帮助网站获取免费的流量，进而在搜索引擎上提升网站的排名，提
高网站的知名度。
页面必须有三个标签用来符合 SEO 优化。
```

```html
1. title 网站标题
title 具有不可替代性，是我们内页的第一个重要标签，是搜索引擎了解网页的入口和对网页主题归属的最佳判
断点。
建议：网站名（产品名）- 网站的介绍 （尽量不要超过30个汉字）
例如：
 京东(JD.COM)-综合网购首选-正品低价、品质保障、配送及时、轻松购物！
 小米商城 - 小米5s、红米Note 4、小米MIX、小米笔记本官方网站
```

```html
description 网站说明
简要说明我们网站主要是做什么的。
我们提倡，description 作为网站的总体业务和主题概括，多采用“我们是…”、“我们提供…”、“×××网
作为…”、“电话：010…”之类语句。
例如：
<meta name="description" content="京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、
家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物
体验!" />
```

```html
 keywords 关键字
keywords 是页面关键词，是搜索引擎的关注点之一。
keywords 最好限制为 6～8 个关键词，关键词之间用英文逗号隔开，采用 关键词1,关键词2 的形式。
例如：
<meta name= " keywords" content="网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配 件,手表,存储卡,京东" />
```

## i标签

i标签默认斜体；



## 文档声明

```
<!doctype html>
```

文档声明作用： 让浏览器使用标准模式对页面进行渲染。

## 1、标签

### 1.1、meta(desc、keyword)

**属性**

```html

charset 			网页字符集(如utf-8)

         <!--字符集编码-->
         <meta charset="utf-8">


name 				数据的名称（keywords、description）
content 			数据的内容

         <!--网页关键字：-->
         <meta name="keywords" content="8-12个以英文逗号隔开的单词/词语">

         <!-- 网页描述信息 -->
         <meta name="description" content="80字以内的一段话，与网站内容相关">

定时跳转（content=3设置3秒跳转）

			<!--
             <meta http-equiv="refresh" content="3;url=https://www.mozilla.org"> 
           将页面重定向到另一个网站
   		-->

```

```html
 所有搜索引擎，抓取这个页面、爬行链接、禁止快照：  
<meta name="robots" content="index,follow,noarchive">
  all：文件将被检索，且页面上的链接可以被查询；
  none：文件将不被检索，且页面上的链接不可以被查询；
  index：文件将被检索；
  follow：页面上的链接可以被查询；
  noindex：文件将不被检索，但页面上的链接可以被查询；
  nofollow：文件将被检索，但页面上的链接不可以被查询；
  noarchive：文件将被检索，但禁止保存快照；

网页作者：
<meta name="author" content="obama">

网页网页生成工具 
<meta name="generator" content="Sublime Text3">

定义页面最新版本 
<meta name="revised" content="David, 2008/8/8/" />

网页版权信息：
<meta name="copyright" content="2009-2014©版权所有">
```

### 1.2、语义化标签

```html
<h1>一级标题</h1>
     <h2>二级标题</h2>

在页面中独占一行的元素称为块元素（block element）

 <!-- 
         p标签表示页面中的一个段落

         p也是一个块元素

				<p> 标签主要用于存放文字，因此 <p> 里面不能放块级元素，特别是不能放<div>
						同理， <h1>~<h6>等都是文字类块级标签，里面也不能放其他块级元素
      -->
 <br /> 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。

 <!-- 
          strong表示强调，重要内容！
       -->
      <p>你今天必须要<strong>完成作业</strong>！</p>


 <!-- 
          em标签用于表示语音语调的一个加重

          在页面中不会独占一行的元素称为行内元素（inline element）
       -->
      <p>今天天气<em>真</em>不错！</p>

<!-- blockquote 表示一个长引用 -->
      <blockquote>
          这句话我是从来没有说过的！
      </blockquote>

 <!-- 
          q表示一个短引用
       -->
      子曰<q>学而时习之，乐呵乐呵！</q>

 <!-- 
        header 表示网页的头部
        main 表示网页的主体部分(一个页面中只会有一个main)
        footer 表示网页的底部
        nav 表示网页中的导航
        aside 和主体相关的其他内容（侧边栏）
        article 表示一个独立的文章
        section 表示一个独立的区块，上边的标签都不能表示时使用section

        div 没有语义，就用来表示一个区块，目前来讲div还是我们主要的布局元素
        span 行内元素，没有任何的语义，一般用于在网页中选中文字

      -->
```

### 1.3、列表

```html
		  1、有序列表  
        2、无序列表
        3、定义列表
```

```css
	 <!-- 定义列表 -->
    <!-- define列表 -->
    <dl>
        <!-- define标题 -->
        <dt></dt>
        <!-- define description -->
        <dd></dd>
    </dl>
```

#### 列表属性

>   铭哥补充

-   list-style-type

    ```
    disc         实心点
    circle       圆圈
    square       小方框
    decimal      数字
    lower-roman  小写罗马字
    upper-roman  大写罗马字
    lower-alpha  小写字母
    upper-alpha  大写字母
    。。。。。。。。。
    ```

-   list-style-position 位置

    ```
    inside   标示在li里面
    outside  标示在li外面
    ```

-   list-style-image 使用图片 url(./123.gif)

-   list-style （综合，无顺序数量要求）

    ```
    list-style: type position image
    list-style: none
    ```

### 1.4、a标签

行内元素

属性与下载

```htm
 <!-- 
        target属性，用来指定超链接打开的位置（跳新页）
            可选值：
                _self 默认值 在当前页面中打开超链接
                _blank 在一个新的要么中打开超链接

			   href：目标文件地址
			   
			   
			   
			   name：
			   			用于指定锚点；
			   			
			   			
			   			
			   			
			   			
					（空：刷新）
						锚点：
							地址后跟#锚点
							锚点（id=“锚点”，或<a name="page01">）
 -->					
 
 			（跳其它页）
 			
 			不能打开则下载（如exe，压缩件，word。。。）
```

#### 锚点

**设置：**

**第一种方式： 使用 a 标签设置锚点：**

```html
<a name=“锚点名”></a>
```

**第二种方式：** 标签通过 id 属性设置锚点名：

任何标签通过设置 id 都可以作为锚点！

```html
<div id="page01">
	内容...
</div>

<h2 id="section"></h2>
```

**如何跳转到锚点**

超链接可以跳转到指定的锚点。

```html
<!--跳转到本页面指定的锚点-->
<a href="#锚点名">超链接</a>

<!--跳转到其他页面指定的锚点-->
<a herf="页面地址#锚点名">超链接</a>

<!--跳转到空锚点，导致返回页面顶部-->
<a href="#">超链接</a>
```







#### mail、tel、sms

```
<a href="mailto:fmuncle@163.com">发邮件给我</a>
<br>
<a href="tel:18618176338">打电话给我</a>
<br>
<a href="sms:18618176338">发短信给我</a>
```









### 1.5、img标签

**行内块元素**

```
属性
	src
	alt	（除替代，利于爬虫）
	width		（保比例）
	height
	border
	title     提示文本
```



```html
图片的格式：
            jpeg(jpg)
                - 支持的颜色比较丰富，不支持透明效果，不支持动图
                - 一般用来显示照片
            gif
                - 支持的颜色比较少，支持简单透明，支持动图
                - 颜色单一的图片，动图
            png
                - 支持的颜色丰富，支持复杂透明，不支持动图
                - 颜色丰富，复杂透明图片（专为网页而生）
            webp
                - 这种格式是谷歌新推出的专门用来表示网页中的图片的一种格式
                - 它具备其他图片格式的所有优点，而且文件还特别的小
                - 缺点：兼容性不好

            base64 
                - 将图片使用base64编码，这样可以将图片转换为字符，通过字符的形式来引入图片    
                - 一般都是一些需要和网页一起加载的图片才会使用base64
```

**补充：**

​		基线：vertical-align：baseline；（啥？图片基线与边框有缝）

​		图片间微小间距，属性vertical-align：top消除。

![image-20210220132453888](image-20210220132453888.png)

### 1.6、iframe

（打广告使用iframe，百度联盟等）

```html
	<!-- 

        内联框架，用于向当前页面中引入一个其他页面
            src 				引入网页路径
            frameborder 	边框（0，1）
				width
				height

     -->
    <iframe src="https://www.qq.com" width="800" height="600" frameborder="0"></iframe>
    <h1>Hello</h1>
```

### 1.7、audio，video

```html
audio引入音频文件

	loop是否循环播放
	controls是否可控
	autoplay自动播放

	<source></source>标签代替src
```

```html
<audio controls>
        <!-- 对不起，您的浏览器不支持播放音频！请升级浏览器！ -->
        <source src="./source/audio.mp3">
        <source src="./source/audio.ogg">
    	/*可能不兼容*/
        <embed src="./source/audio.mp3" type="audio/mp3" width="300" height="100">
    </audio>
```

video标签同理！

```html
<video controls>
        <source src="../资料/音视频/flower.mp4">
        <embed src="../资料/音视频/flower.mp4" type="video/mp4" width="100" height="100">
    </video>
```

### 1.8、标签嵌套

```xml
<!-- 
        块元素（block element）
            - 一般对页面进行布局
        行内元素（inline element）
            - 行内元素主要用来包裹文字


            注：
				p元素中不能放任何的块元素

        浏览器在解析网页时，会自动对网页中不符合规范的内容进行修正
            比如：
                标签写在了根元素的外部
                p元素中嵌套了块元素
                根元素中出现了除head和body以外的子元素
                ... ...
-->
```

### 1.9、pre标签

```
文本空格换行等保留
```

### 1.10、标签属性

```
<标签名 属性名="值"> 内容 </标签名>  /*可多*/
```

**属性**

#### lang

html设置，值为cn、en、fr……

### 1.11、（补充）标签

#### em

斜体

#### strong

粗体

#### ins

下划线

#### del

删除线

#### sub

下标(圈下)

#### sup

上标

#### script

引入js

```
src：			规定外部脚本的 URL
type: 		 规定脚本的 MIME 类型，默认text/javascrip
```



#### base

head标签内，提供相对路径

```
href: 		规定页面中所有相对链接的基准 URL。
target: 		规定页面中所有的超链接和表单在何处打开。值为_blank/_self
```

#### style

```
type: 
		属性，规定样式表的 MIME 类型，默认text/css
```



#### link

```
href：		定义被链接文档的位置
rel：		定义当前文档与被链接文档之间的关系。
type：		规定样式表的 MIME 类型，默认text/css
```

#### 下文本

```
<!--一下文本标签  作为了解-->
<cite>    用于引证、举例、(标签定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题)通常为斜体字
<dfn> 定义一个定义项目
<code> 定义计算机代码文本
<samp> 定义样式文本 标签并不经常使用。只有在要从正常的上下文中将某些短字符序列提取出来，对它们加以强调的极少情况下，才使用这个标签。
<kbd> 定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。
<abbr> 定义缩写 配合title属性  (IE6以上)
<bdo>  来覆盖默认的文本方向 dir属性 值: lrt  rtl
<var> 定义变量。您可以将此标签与 <pre> 及 <code> 标签配合使用。
<small> 标签定义小型文本（和旁注）
<b>    粗体字标签 根据 HTML 5 的规范，<b> 标签应该做为最后的选择，只有在没有其他标记比较合适时才使用它。
<i>    斜体字标签 标签被用来表示科技术语、其他语种的成语俗语、想法、宇宙飞船的名字等等。
<u>    下划线字体标签 标签定义与常规文本风格不同的文本，像拼写错误的单词或者汉语中的专有名词。 请尽量避免使用 <u> 为文本加下划线，用户会把它混淆为一个超链接。
<q>  签定义一个短的引用。浏览器经常会在这种引用的周围插入引号。(小段文字)
<blockquote> 标签定义摘自另一个源的块引用。浏览器通常会对 <blockquote> 元素进行缩进。(大段文字) (块状元素)
<address>  定义地址 通常为斜体 (注意非通讯地址)  块状元素
<font>     H5已删除 字体标签，可以通过标签的属性指定文字的大小、颜色及字体等信息
<tt>       H5已删除 打字机文字
<big>      H5已删除 大型字体标签
<strike>   H5已删除 添加删除线
<acronym>  H5已删除 首字母缩写 请使用<abbr>代替
```

#### body

margin：8px（默认）













## 2、CSS，选择器

### 2.1、简介

+ ```
    在标签内部通过style属性来设置元素的样式
    
    将样式编写到head中的style标签里
    
    可以将CSS样式编写到一个外部的CSS文件中
    
    然后通过link标签来引入外部的CSS文件
    
    link标签利用浏览器缓存，提高加载速度
    ```

### 2.2、CSS语法

名值对

### 2.3 、常用（4）

#### 元素

```
标签名+{}
```



#### id

```
#id属性值{}
```



#### 类

```
.class属性值*{}
```



#### 星

```
*{}
```



### 2.4、复合

#### 交集

```
语法：
		/* 没有空格！ */
		选择器1选择器2选择器3选择器n{
		
		}
```



#### 并集

```
语法：
		/* 逗号隔开 */
		选择器1,选择器2,选择器3,选择器n{
		
		}
```



### 2.5、关系

```html
		父元素
            - 直接包含子元素的元素叫做父元素
        子元素
            - 直接被父元素包含的元素是子元素
        祖先元素
            - 直接或间接包含后代元素的元素叫做祖先元素
            - 一个元素的父元素也是它的祖先元素
        后代元素
            - 直接或间接被祖先元素包含的元素叫做后代元素
            - 子元素也是后代元素
        兄弟元素
            - 拥有相同父元素的元素是兄弟元素


子元素选择器
                作用：选中指定父元素的指定子元素
                语法：父元素 > 子元素

后代元素选择器：
                作用：选中指定元素内的指定后代元素
                语法：祖先 后代

选择下一个兄弟
                语法：前一个 + 下一个
            选择下边所有的兄弟
                语法：兄 ~ 弟
```





#### 子元素

```
语法：父元素 > 子元素
```



#### 后代元素

```
语法：祖先 后代
```



### 2.6、属性

```html
			[属性名] 选择含有指定属性的元素
            [属性名=属性值] 选择含有指定属性和属性值的元素
            [属性名^=属性值] 选择属性值以指定值开头的元素
            [属性名$=属性值] 选择属性值以指定值结尾的元素
            [属性名*=属性值] 选择属性值中含有某值的元素的元素

			p[title*=e]{
            color: orange;
        	}
```

### 2.7、伪类

伪类（不存在的类，特殊的类）

**注意：**空格问题（有表后代，无表本身）

```html



伪类（不存在的类，特殊的类）
            - 伪类用来描述一个元素的特殊状态
                比如：第一个子元素、被点击的元素、鼠标移入的元素...
            - 伪类一般情况下都是使用:开头
                :first-child 第一个子元素
                :last-child 最后一个子元素

						/*(所有，理解得了吗？（无限套娃，子元素（子元素第n个）第n个)*/
                :nth-child() 选中第n个子元素
                    特殊值：
                        n 第n个 n的范围0到正无穷
                        2n 或 even 表示选中偶数位的元素
                        2n+1 或 odd 表示选中奇数位的元素

                    - 以上这些伪类都是根据所有的子元素进行排序

                :first-of-type
                :last-of-type
                :nth-of-type()
                    - 这几个伪类的功能和上述的类似，不通点是他们是在同类型元素中进行排序

            - :not() 否定伪类
                - 将符合条件的元素从选择器中去除



		/* ul > li:first-child{
            color: red;
        } */
    
        /* ul > li:last-child{
            color: red;
        } */

        /* ul > li:nth-child(2n+1){
            color: red;
        } */

        /* ul > li:nth-child(even){
            color: red;
        } */

        /* ul > li:first-of-type{
            color: red;
        } */

        ul > li:not(:nth-of-type(3)){
            color: yellowgreen;
        }
```

### 2.8、 a元素伪类

```html
 :link 				超链接a在未被访问前的样式

		a:link{
            color: red;     
        }

 :visited 			超链接a在其链接地址已被访问过时的样式
            				由于隐私的原因，所以visited这个伪类只能修改链接的颜色
		a:visited{
            color: orange; 
            /* font-size: 50px;   */
        }

 :hover 用来表示鼠标移入的状态
		a:hover{
             color: aqua;
             font-size: 50px;
         }
:active 用来表示鼠标点击
		 a:active{
             color: yellowgreen;
             
         }
```

>   顺序
>
>   love - hate 原则，link，visited，hover，active

### 2.9、伪元素

```html
 伪元素，表示页面中一些特殊的并不真实的存在的元素（特殊的位置）
                伪元素使用 :: 开头


				::first-letter 表示第一个字母
                ::first-line 表示第一行
                ::selection 表示选中的内容
                ::before 元素的开始 
                ::after 元素的最后
                    - before 和 after 必须结合content属性来使用


		 p::first-letter{
            font-size: 50px;
        }

        p::first-line{
            background-color: yellow; 
        }

        p::selection{
            background-color: greenyellow;
        }

        /* div::before{
            content: 'abc';
            color: red;
        }

        div::after{
            content: 'haha';
            color: blue;
        } */

        div::before{
            content: '『';
         }

        div::after{
            content: '』';
        }

```

### 2.10、样式继承

样式的继承，我们为一个元素设置的样式同时也会应用到它的后代元素上

```html
			样式的继承，我们为一个元素设置的样式同时也会应用到它的后代元素上

            继承是发生在祖先后后代之间的

            继承的设计是为了方便我们的开发，
                利用继承我们可以将一些通用的样式统一设置到共同的祖先元素上，
                    这样只需设置一次即可让所有的元素都具有该样式

            注意：并不是所有的样式都会被继承：
                比如 背景相关的，布局相关等的这些样式都不会被继承。
```



### 2.11、选择器权重



```html
选择器的权重
                内联样式(style)             1,0,0,0
                id选择器        		     0,1,0,0
                类和伪类选择器   			   0,0,1,0
                元素选择器       		 	0,0,0,1
                通配选择器(*)       		 	0,0,0,0
                继承的样式      				 没有优先级

比较优先级，相加计算。（不能越级）（相同使用靠下样式）
						!important （属性后面加）


注意字体选择：
			参照小米项目问题5。
```





### 2.12、单位

+ ```
    + 像素
    + 百分比
    
    + em
    
        em是相对于元素的字体大小来计算的*
    
                *- 1em = 1font-size*
    
     	 rem
    
                *- rem是相对于根元素的字体大小来计算*
                
	
    px：pixel，		 	像素，屏幕上显示的最小单位，用于网页设计，直观方便；
    %						 百分比
    pt：point，         是一个标准的长度单位，1pt＝1/72英寸，用于印刷业，非常简单易用；
    cm 厘米
    mm 毫米
    ```
    
    

### 2.13、颜色

```html
颜色单位：
                    在CSS中可以直接使用颜色名来设置各种颜色
                        比如：red、orange、yellow、blue、green ... ...
                        但是在css中直接使用颜色名是非常的不方便

                    RGB值：
                        - RGB通过三种颜色的不同浓度来调配出不同的颜色
                        - R red，G green ，B blue
                        - 每一种颜色的范围在 0 - 255 (0% - 100%) 之间
                        - 语法：RGB(红色,绿色,蓝色)

                    RGBA:
                        - 就是在rgb的基础上增加了一个a表示不透明度
                        - 需要四个值，前三个和rgb一样，第四个表示不透明度
                            1表示完全不透明   0表示完全透明  .5半透明

						  opacity:(也能设置透明，子元素都透明)
										.几	

                    十六进制的RGB值：
                        - 语法：#红色绿色蓝色
                        - 颜色浓度通过 00-ff
                        - 如果颜色两位两位重复可以进行简写  
                            #aabbcc --> #abc
                    
                    HSL值 HSLA值
                        H 色相(0 - 360)
                        S 饱和度，颜色的浓度 0% - 100%
                        L 亮度，颜色的亮度 0% - 100%
```







## 3、layout

### 3.1、文档流

```xml
文档流（normal flow）
在网页的最底层
```

### 3.2、mar、pad、bor、cont

```xml
元素中的所有的子元素和文本内容都在内容区中排列

                内容区（content）
                内边距（padding）		
                边框（border）
                外边距（margin）
margin-left+border-left+padding-left+width+padding-right+border-right+margin-right = 其父元素内容区的宽度（必须满足）
```

>   padding、margin
>
>   4：上 ，右 ，下 ，左 （顺时）
>
>   3：上， 右左 ，下
>
>   2：上下， 右左



#### border

border

#### padding

>   1、百分比设置内边距，不论方向，皆参考父元素内容宽度

>   2、padding value can‘t **-number** or **auto**

>   3、行内元素垂直方向padding右问题

#### margin

>   同padding1、3









#### content

```
内容区默认大小


如果没有设置宽度，块根据父元素大小自动计算，
					行内元素
					行内块元素
					宽度根据  内容 大小计算。


如果没有设置高度，块级、行内、行内块都会根据内容大小计算。
```











### 3.3、盒子布局

#### 3.3.1、水平布局

```xml
元素在父元素中水平方向位置由以下决定
						margin-left
                        border-left
                        padding-left
                        width
                        padding-right
                        border-right
                        margin-right
满足
margin-left+border-left+padding-left+width+padding-right+border-right+margin-right = 其父元素内容区的宽度 （必须满足）
```



#### 3.3.2、垂直布局

#### 3.3.3、外边距折叠

>   块元素发生，垂直

塌陷，合并

```
塌陷

			父子元素上下外边距重叠，作用在父元素上。
			
			解决：
				边框，padding，父overf：hidden
				
				
合并
			兄弟元素上下margin合并取较大
			
			解决：
				无。
						
                    
                    
```



#### 3.3.4、overflow

内容溢出

```
overflow 
						属性来设置父元素如何处理溢出的子元素

						visible，默认值 子元素会从父元素中溢出，在父元素外部的位置显示
                        hidden 溢出内容将会被裁剪不会显示
                        scroll 生成两个滚动条，通过滚动条来查看完整的内容
                        auto 根据需要生成滚动条
						inherit    规定应该从父元素继承 overflow 属性的值。

 
 
 
 overflow-x:		（同上）
 overflow-y:
```



### 3.4、行内元素盒模型

```java
不能设置：
    宽高
能设置（不影响垂直布局）：
    margin
    border
    padding
```





### 3.5、display、visibility

```
 display    设置元素显示类型
                          		可选值：
                              inline 将元素设置为行内元素
                              block 将元素设置为块元素
                              inline-block 将元素设置为行内块元素 行内块，既可以设置宽度和高度又不会独占一行
                              table 将元素设置为一个表格
                              none 元素不在页面中显示



                visibility 设置元素显示状态
                          		可选值：
                              visible 默认值，元素在页面中正常显示
                              hidden 元素在页面中隐藏 不显示，但是依然占据页面的位置
            


例：
            display: block;
            visibility: hidden;
```



### 3.6、box-sizing

盒子尺寸

```xml
box-sizing:
			content-box;(根据内容设置，默认，padding扩张边框)
			border-box;(根据边框设置,padding压缩内容)


width：
height：
min-width：
max-height：
```

>   %单位依据父元素内容区

```
兼容写法:

 -webkit-box-sizing: border-box;
```



### 3.7、阴影、轮廓、圆角

```xml
 box-shadow 用来设置元素的阴影效果，阴影不会影响页面布局 
                第一个值 水平偏移量 设置阴影的水平位置 正值向右移动 负值向左移动
                第二个值 垂直偏移量 设置阴影的水平位置 正值向下移动 负值向上移动
                第三个值 阴影模糊半径
                第四个值 阴影颜色
text-shadow

 /* 将元素设置为一个圆形 */
            border-radius: 50%;


outline 用来设置元素的轮廓线，用法和border一模一样
                轮廓和边框不同的点，就是轮廓不会影响到可见框的大小    
```

### 3.8、默认、继承样式

#### 继承

字体样式、文字颜色、文本样式（除vertical-align）可继承





#### 默认样式，清除

>   比继承样式优先级大

```
很多元素是具有默认样式的，比如 p 元素有默认的上外边距和下外边距，h1~h6 标题元素也有默认的上外边距和下外边距且字体加粗，body 元素有默认的外边距，超链接有默认的字体颜色和下划线，ul 元素有默认的左内边距 等等。

在不同的浏览器下，元素的默认样式有时候有些差异，这样元素的默认样式就未我们的开发带来了一些问题。
```

清除

①全局选择器重置样式

```
* {
    margin: 0;
    padding: 0;
}
```

>   此种方法，在讲解案例的时候可以简单用一下，但实际开发中是不会用这种方式的，因为 `*` 是选择所有的元素，而并不是所有的元素都有默认样式，改方式效率较低。

②Reset.css

```
/* 基础设置 */
body,h1,h2,h3,h4,h5,h6,hr,p,blockquote,dl,dt,dd,ul,ol,li,pre,form,fieldset,legend,button,input,textarea,th,td{
    margin: 0;
    padding: 0;
}

ul,ol {
    list-style: none;
}

img {
    /* 底部留白 */
    display: block;
  border:0;
}

b,strong {
    font-weight: 400;
}

h1,h2,h3,h4,h5,h6 {
    /* 父元素字号的百分比 */
    font-size: 100%;
}

i,em {
    /* 不倾斜 */
    font-style: normal;
}

u,ins,s,del {
    /* 去掉中划线和下划线 */
    text-decoration: none;
}

table {
    border: 1px solid #999;
    /* 相当于是cellspacing */
    border-spacing: 0;
    /* 1px边框 */
    border-collapse: collapse;
}

td,th {
    border: 1px solid #999;
}

input,button {
    /* 去掉轮廓线 */
    outline: none;
    border:none;
}

/* 风格设置 */
body {
    font: 12px/1.3 "Microsoft YaHei", Tahoma, Helvetica, Arial, "\5b8b\4f53", sans-serif;
    color: #333;
}

a {
    text-decoration: none;
    color: #666;
}

a:hover {
    color:#c00;
    text-decoration: underline;
}

.clearfix::after {
    content: "";
    display: block;
    clear: both;
}
```

>   选择到具有默认样式的元素，清空其默认的样式。
>
>   各网站都会定义自己的重置样式表，请参考 http://www.unclealan.cn/index.php/front/174.html

③Normalize.css

```
Normalize.css是一种CSS reset的替代方案。它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的CSS reset，Normalize.css是一种现代的、为HTML5准备的优质替代方案。

官网地址：http://necolas.github.io/normalize.css/

GitHub: https://github.com/necolas/normalize.css/

相对于 Reset.css， Normalize.css 有如下特点：

保护有价值的浏览器默认样式而不是完全去掉它们。
新增对 HTML5 元素的设置。
修复浏览器 BUG 并保证各浏览器的一致性，修复的 BUG 有预格式化文字的 font-size 问题、在 IE9 中 SVG 的溢出、许多出现在各浏览器和操作系统中的与表单相关的 BUF 等。
Normalize.css 对并集选择器的使用比较谨慎，有效避免调试工具杂乱。
```





### 3.9、页面布局



#### 组成

![页面组成](http://learn.fuming.site/front-end/html5css3/CSS/images/%E9%A1%B5%E9%9D%A2%E7%BB%84%E6%88%90.png)







#### 版心

在PC端网页中,一般都会有一个固定宽度且水平居中的盒子,来显示网页的主要内容,这是网页的**版心**。

版心常见的宽度有 1200px、1000px、960px 等等

![网页版心](前端基础.assets/版心.png)



#### 居中总结

```
行内元素、行内块


让行内元素或行内块元素进行居中，需要对其父元素设置文本对齐方式，因为行内元素或行内块元素可以被当做文本处理。

让行内元素或行内块元素水平居中对齐，在其父元素上设置 text-align:center。

让行内元素或行内块元素垂直居中对齐，在其父元素上设置 line-height 属性，行高的值与高度相等即可。

块级元素

1 水平居中对齐

    设置元素的左外边距和右外边距的值都为 auto。

    注意：

    让块级元素居中，是对元素本身进行设置。

    浮动的元素以及绝对定位和相对定位的元素不能使用该方法进行居中。

2 水平方向和垂直方向都居中对齐

    要实现一个块级元素在父元素里面垂直居中对齐，需要对改元素设置定位；这种方式可以设置元素垂直居中，可以设置元素水平居中。

    定位的元素水平居中： 设置 left:50%，设置 margin-left 为负的宽度的一半。

    定位的元素垂直居中： 设置top:50%，设置 margin-top 为负的高度的一半。
```





#### 行内、行内块空白





**元素之间的空白**

```
1) 产生的原因
书写 html 代码的时候，每写一个元素都会换行，这个换行符号会被浏览器解析成空格，空格的大小根据字体大小的设置来计算。

块级元素没有这个问题，因为行内块和行内元素会被当做文本处理。

------------------------------------------------------------------
2) 解决方案：
------------------------------------------------------------------
方案一： 元素和元素之间不写换行（不建议）
------------------------------------------------------------------
方案二：给父元素设置 font-size:0,这样空格就不显示；再给具体的行内元素或行内块元素设置字体大小。
```



**图片（行内块元素）底部幽灵空白**

```
1) 产生的原因
图片（行内块元素）会按照基线对齐，基线和底线之间有间距，这个间距就是幽灵空白。

注意：

一般行内块元素如果里面没有文本内容的话会出现跟图片相同的效果；但是如果里面有文本内容，里面的文字会以基线对齐，行内块元素就不存在底部的空白了。


----------------------------------------------------
2) 解决方案
-----------------------------------------------------
方案一：设置图片（行内块元素）为块级元素（常用，但是如果一行内要显示多个图片（行内块），就不合适了）。
-----------------------------------------------------
方案二：设置图片（行内块元素）的基线对齐方式，vertical-align:bottom,值不是 baseline。
----------------------------------------------------
方案三：给图片（行内块元素）的父元素设置 font-size:0。
```



#### 精灵图使用



**什么是精灵图**

CSS Sprites 也称之为精灵图或雪碧图，是一种**背景图片**的应用处理方式，将很多小图片合并到到一张大图中去。把整个大图作为背景图，然后通过 `background-position` 属性讲合适的图片显示到元素上。

精灵图最大的作用是**减少网络的请求次数**，因为图片只要下载一次就好，不用再分别去下载那些小图。

![精灵图](前端基础.assets/精灵图.png)

**background-postion**

实现精灵图主要是靠 设置 `background-postion` 来对背景图片进行定位，从而在元素上显示合适的图片，`background-position` 属性可能的值有：

| 值                                                           | 描述                                                         |
| :----------------------------------------------------------- | :----------------------------------------------------------- |
| left top left center left bottom center top center center center bottom right top right center right bottom | 如果您仅规定了一个关键词，那么第二个值将是"center"。 默认值：0% 0%。 |
| x% y%                                                        | 第一个值是水平位置，第二个值是垂直位置。 左上角是 0% 0%,右下角是 100% 100%。 如果您仅规定了一个值，另一个值将是 50%。 |
| xpos ypos                                                    | 第一个值是水平位置，第二个值是垂直位置。 单位是像素 (0px 0px) 或任何其他的 CSS 单位，可以为负值 z如果您仅规定了一个值，另一个值将是50%。 您可以混合使用 % 和 position 值。 |

>   **关于百分比：**
>
>   百分比值的偏移指定图片的相对位置和容器的相对位置重合。值0%代表图片的左边界（或上边界）和容器的左边界（上边界）重合。值100%代表图片的右边界（或下边界）和容器的右边界（或下边界）重合。值50%则代表图片的中点和容器的中点重合。
>
>   当指定百分比值的时候，实际上执行了以下的计算公式（该公式可以用数学方式定义图片和容器相对位置重合）：
>
>   ```
>   (元素宽度 - 图片宽度) * 百分比 = 水平方向偏移位置
>   (元素宽度 - 图片宽度) * 百分比 = 垂直方向偏移位置
>   ```
>
>   使用 X 坐标来举个例子，假设有一个 300px 宽的图片，将这个图片使用到一个 100px 宽的元素中，
>
>   ```
>   100px - 300px = -200px (元素和图片的宽度差)
>   ```
>
>   当对 `background-position` 设置值依次为 -25%，0%，50%，100%，125%，得到图片相对容器的偏移值为：
>
>   ```
>   -200px * -25% = 50px
>   -200px * 0% = 0px
>   -200px * 50% = -100px
>   -200px * 100% = -200px
>   -200px * 125% = -250px
>   ```

**制作精灵图**

-   在线工具 https://alloyteam.github.io/gopng/

    ![img](前端基础.assets/在线精灵图01.png)![img](前端基础.assets/在线精灵图02.png)![img](前端基础.assets/在线精灵图03.png)![img](前端基础.assets/在线精灵图04.png)

-   用 PS 自行制作。

    ![img](前端基础.assets/ps精灵图01.png)![img](前端基础.assets/ps精灵图02.png)





























### 999、练习

#### 3.8.1、图片列表

![01_图片列表](D:\A_YuHaiWei\A_Html_5\基础资料\code\exercise\练习的截图\01_图片列表.png)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>图片列表</title>
    <link rel="stylesheet" href="./css/reset.css">
    <style>


        /* 设置body的背景颜色 */
        body{
            background-color: antiquewhite
        }

        /* 设置外部ul的样式 */
        .img-list{
            /* 设置ul的宽度 */
            width: 190px;
            /* 设置ul的高度 */
            height: 470px;
            /* 裁剪溢出的内容 */
            overflow: hidden;
            /* 使ul在页面中居中（实际示例中不需要这么写） */
            margin: 50px auto;
            background-color: #F4F4F4;
        }
        /* 设置li的位置 */
        .img-list li:not(:last-child){
            margin-bottom: 9px;
        }

        /* 设置图片的大小 */
        .img-list img{
            width: 100%;
        }
    </style>
</head>
<body>

    <!-- <div>
        <a href="javascript:;"><img src="" alt=""></a>
        <a href="javascript:;"><img src="" alt=""></a>
        <a href="javascript:;"><img src="" alt=""></a>
    </div> -->

    <ul class="img-list">
        <li>
            <a href="javascript:;">
                <img src="./img/01/1.jpg" alt="">
            </a>
        </li>

        <li>
            <a href="javascript:;">
                <img src="./img/01/2.jpg" alt="">
            </a>
        </li>

        <li>
            <a href="javascript:;">
                <img src="./img/01/3.jpg" alt="">
            </a>
        </li>

    </ul>
    
</body>
</html>
```

#### 总结

```xml
溢出
overflow: hidden;
javascript:;
```



#### 3.8.2、京东左侧导航

![02_京东左侧导航](D:\A_YuHaiWei\A_Html_5\基础资料\code\exercise\练习的截图\02_京东左侧导航.png)

```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>京东的左侧导航</title>
    <link rel="stylesheet" href="./css/reset.css">
    <style>

        /* 设置body */
        body{
            /* 设置一个网页的背景，以使我们方便查看 */
            background-color: #bfa;
        }

        /* 设置菜单外部容器 */
        .left-nav{
            /* 设置宽度 */
            width: 190px;
            /* 设置高度 */
            height: 450px;
            /* 设置padding */
            padding: 10px 0;
            /* 设置一个背景颜色 */
            background-color: #fff;

            margin: 50px auto;
        }

        /* 设置菜单内部的item */
        .left-nav .item{
            height: 25px;
            /* 要让一个文字在父元素中垂直居中，只需将父元素的line-height设置为一个和父元素height一样的值 */
            line-height: 25px;
            /* 设置item的右内边距，将文字向内移动  */
            padding-left: 18px;
            /* 设置字体大小 */
            font-size: 12px;
        }

        /* 设置/的距离 */
        .item .line{
            padding: 0 2px;
        }

        /* 为item设置一个鼠标移入的状态 */
        .item:hover{
            background-color: #d9d9d9;
        }

        /* 设置超链接的样式 */
        .item a{
            /* 设置字体大小 */
            font-size: 14px;
            /* 设置字体的颜色 */
            color: #333;
            /* 去除下划线 */
            text-decoration: none;
        }

        /* 设置超链接的hover的样式 */
        .item a:hover{
            color: #c81623;
        }

    </style>
</head>

<body>

    <!-- 创建一个外部的容器 nav(div) div(div) ul(li)  -->
    <nav class="left-nav">
        <div class="item">
            <a href="#">家用电器</a>
        </div>

        <div class="item">
            <a href="#">手机</a><span class='line'>/</span><a href="#">运营商</a><span class='line'>/</span><a href="#">数码</a>
        </div>

        <div class="item">
            <a href="#">电脑</a><span class='line'>/</span><a href="#">办公</a>
        </div>

        <div class="item">
            <a href="#">家居</a><span class='line'>/</span><a href="#">家具</a><span class='line'>/</span><a href="#">家装</a><span class='line'>/</span><a href="#">厨具</a>
        </div>

        <div class="item">
            <a href="#">男装</a><span class='line'>/</span><a href="#">女装</a><span class='line'>/</span><a href="#">童装</a><span class='line'>/</span><a href="#">内衣</a>
        </div>

        <div class="item">
            <a href="#">美妆</a><span class='line'>/</span><a href="#">个护清洁</a><span class='line'>/</span><a href="#">宠物</a>
        </div>

        <div class="item">
            <a href="#">女鞋</a><span class='line'>/</span><a href="#">箱包</a><span class='line'>/</span><a href="#">钟表</a><span class='line'>/</span><a href="#">珠宝</a>
        </div>

        <div class="item">
            <a href="#">男鞋</a><span class='line'>/</span><a href="#">运动</a><span class='line'>/</span><a href="#">户外</a>
        </div>

        <div class="item">
            <a href="#">房产</a><span class='line'>/</span><a href="#">汽车</a><span class='line'>/</span><a href="#">汽车用品</a>
        </div>

        <div class="item">
            <a href="#">母婴</a><span class='line'>/</span><a href="#">玩具乐器</a>
        </div>

        <div class="item">
            <a href="#">食品</a><span class='line'>/</span><a href="#">酒类</a><span class='line'>/</span><a href="#">生鲜</a><span class='line'>/</span><a href="#">特产</a>
        </div>

        <div class="item">
            <a href="#">艺术</a><span class='line'>/</span><a href="#">礼品鲜花</a><span class='line'>/</span><a href="#">农资绿植</a>
        </div>

        <div class="item">
            <a href="#">医药保健</a><span class='line'>/</span><a href="#">计生情趣</a>
        </div>

        <div class="item">
            <a href="#">图书</a><span class='line'>/</span><a href="#">文娱</a><span class='line'>/</span><a href="#">电子书</a>
        </div>

        <div class="item">
            <a href="#">机票</a><span class='line'>/</span><a href="#">酒店</a><span class='line'>/</span><a href="#">旅游</a><span class='line'>/</span><a href="#">生活</a>
        </div>

        <div class="item">
            <a href="#">理财</a><span class='line'>/</span><a href="#">众筹</a><span class='line'>/</span><a href="#">白条</a><span class='line'>/</span><a href="#">保险</a>
        </div>

        <div class="item">
            <a href="#">安装</a><span class='line'>/</span><a href="#">维修</a><span class='line'>/</span><a href="#">清洗</a><span class='line'>/</span><a href="#">二手</a>
        </div>

        <div class="item">
            <a href="#">工业品</a>
        </div>


    </nav>



</body>

</html>
```

#### 总结

```xml
使子元素文字在父元素中垂直居中
						父元素height=子元素line-height
```



#### 3.8.3、网易新闻列表

![03_网易的新闻列表](D:\A_YuHaiWei\A_Html_5\基础资料\code\exercise\练习的截图\03_网易的新闻列表.png)

```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>网易的新闻列表</title>
    <link rel="stylesheet" href="./css/reset.css">
    <style>
        /* body{
            background-color: #bfa;
        } */

        a{
            /* 去除下划线 */
            text-decoration: none;
        }

        /* 设置容器的样式 */
        .news-wrapper{
            /* 设置宽度 */
            width: 300px;
            /* 设置高度 */
            height: 357px;
            /*设置居中  */
            margin: 50px auto;
            /* 设置背景颜色，显示轮廓 */
            background-color: #fff;

            /* 设置上边框 */
            border-top: 1px solid #ddd;
        }

        /* 设置news-title */
        .news-title{
            /* 为了边框和文字宽度一致，需要将h2转换为行内块元素 */
            display: inline-block;
            /* 设置高度 */
            height: 30px;
            /* 设置上边框  */
            border-top: 1px red solid;
            /* 通过margin-top将h2上移，盖住上边框 */
            margin-top: -1px;

            padding-top: 10px;
        }

        /* 设置title中超链接的样式 */
        .news-title a{
            /* 设置颜色 */
            color: #40406B;
            /* 设置文字的加粗效果 */
            font-weight: bold;
        }

        /* 设置图片容器的高度  */
        .news-img{
            height: 150px;
        }

        /* 设置图片的文字效果 */
        .news-img .img-title{
            /* 向上移动文字 */
            margin-top: -30px;
            /* 设置字体颜色 */
            color: #fff;
            /* 设置加粗 */
            font-weight: bold;
            /* 设置padding */
            padding-left: 30px;

        }

        /* 设置新闻列表 */
        .news-list{
            /* 设置上外边距 */
            margin-top: 20px;
            /* 设置左侧的padding */
            /* padding-left: 14px; */
            
            /* 设置项目符号 */
            /* 設置列表項前的符號 */
            /* list-style: square; */


        }

        /* 设置li */
        .news-list li{
            /*设置下外边距  */
            margin-bottom: 17px;
        }

         /* 通过before伪元素，来为每一个li添加项目符号 */
         .news-list li::before{
            content: '■';
            color: rgb(90, 61, 61);
            font-size: 12px;
            margin-right: 4px;
        }

        /* 设置li中文字 */
        .news-list li a{
            /* 设置字体大小 */
            font-size: 14px;
            /* 设置字体颜色 */
            color: #666;
        }

       
        /* 设置超链接的鼠标移入的样式 */
        .news-list li a:hover{
            color: red;
        }
    </style>
</head>

<body>

    <!-- 创建新闻列表的外侧的容器 -->
    <div class="news-wrapper">
        <!-- 创建一个标题标签 -->
        <h2 class="news-title">
            <a href="#">体育</a>
        </h2>

        <!-- 创建一个图片的容器 -->
        <div class="news-img">
            <a href="#">
                <img src="./img/03/1.jpeg" alt="费德勒">
                <!-- 创建图片标题 -->
                <h3 class="img-title">
                    费德勒首负迪米 扶额头不满发挥
                </h3>
            </a>
        </div>

        <!-- 新闻列表 -->
        <ul class="news-list">
            <li>
                <a href="#">乔治:我爱LA 喜欢和LBJ一起打球</a>
            </li>
            <li>
                <a href="#">格林:3年前降薪就在等KD 特制T恤嘲讽LBJ</a>
            </li>
            <li>
                <a href="#">塔克4000双鞋让保罗羡慕嫉妒 乔丹被震惊</a>
            </li>
            <li>
                <a href="#">CBA下季新赛制:常规赛4组循环 增至46轮</a>
            </li>
        </ul>

    </div>

</body>

</html>
```

#### 总结

```xml
/* 为了边框和文字宽度一致，需要将h2转换为行内块元素 */
            display: inline-block;
before伪元素，来为每一个li添加项目符号
			.news-list li::before{
            content: '■';
            color: rgb(90, 61, 61);
            font-size: 12px;
            margin-right: 4px;
       		 }
```





#### 3.8.4、w3c导航条

![04_w3school的导航条](D:\A_YuHaiWei\A_Html_5\基础资料\code\exercise\练习的截图\04_w3school的导航条.png)

```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>导航条</title>
    <link rel="stylesheet" href="./css/reset.css">
    <style>
        
        /* 设置nav的大小 */
        .nav{

            /* 设置宽度和高度 */
            width: 1210px;
            height: 48px;
            /* 设置背景颜色 */
            background-color: #E8E7E3;

            margin:100px auto;

        }

        /* 设置nav中li */
        .nav li{
            /* 设置li向左浮动，已使菜单横向排列 */
            float: left;
            /* 设置li的高度 */
            /* height: 48px; */
            /* 将文字在父元素中垂直居中 */
            line-height: 48px;

        }

        /* 设置a的样式 */
        .nav a{
            /* 将a转换为块元素 */
            display: block;
            /* 去除下划线 */
            text-decoration: none;
            /* 设置字体颜色 */
            color: #777777;
            /* 修改字体大小 */
            font-size: 18px;

            padding: 0 39px;
        }

        .nav li:last-child a{
            padding: 0 42px 0 41px;
        }

        /* 设置鼠标移入的效果 */
        .nav a:hover{
            background-color: #3F3F3F;
            color: #E8E7E3;
        }
    </style>
</head>

<body>
    <!-- 创建导航条的结构 -->
    <ul class="nav">
        <li>
            <a href="#">HTML/CSS</a>
        </li>
        <li>
            <a href="#">Browser Side</a>
        </li>
        <li>
            <a href="#">Server Side</a>
        </li>
        <li>
            <a href="#">Programming</a>
        </li>
        <li>
            <a href="#">XML</a>
        </li>
        <li>
            <a href="#">Web Building</a>
        </li>
        <li>
            <a href="#">Reference</a>
        </li>
    </ul>

</body>

</html>
```

#### 总结

/* 将a转换为块元素 */
            display: block;

## 4、float

### 4.1、简介

```xml
float：
	none，left，right
浮动可以是元素脱离文档流，使元素水平排列

想
	文字环绕图片
```

### 4.2、特点

```xml
浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，

脱离文档流以后，不需要再区分块和行内了

元素浮动，父元素坍塌，子元素跟随。

铭哥补：

      不再独占一行
      可以设置宽高
      完美支持 margin 和 padding
      默认宽度会根据内容进行计算
      构成了 BFC
```

### 4.3、浮动影响、清理

原：网页布局

```xml
header，main，nav，artical，aside，footer
```

#### 影响

```
浮动的元素会脱离文档流，按照指定的方向发生移动，遇到父级的边界或者是上一个浮动元素或者是上一个不浮动兄弟元素就停下来，所有，浮动元素前面的元素不会受到影响，后面的兄弟元素和父元素会受到影响。

后面的兄弟元素会当做浮动的元素不存在，可能会与浮动元素位置发生重合。
父元素： 浮动的元素脱离父级区域，无法撑开父元素的高度，造成父元素高度塌陷。进而会影响到父元素后面的兄弟元素，造成布局问题。
```

#### 清除

```
1) 给浮动元素的父级设置高度 height（不推荐使用）

缺点：很多情况下元素的高度都是不确定的。

2) 以浮制浮，给浮动元素的父元素设置浮动，原理是开启BFC（不推荐使用）

缺点：只有在父级需要浮动的时候，可以这么清除，否则父级的浮动会继续影响其他元素。

3) 给父级设置 overflow：hidden；，原理也是开启BFC。

优点：简单快捷，

缺点：元素超出的时候，会隐藏超出部分。

5) clear 浮动清除法：给浮动元素的下边添加一个块元素，书写样式 clear:both。

缺点：增加额外的结构，不符合语义化标准

6) after 伪元素清浮动（推荐）

给浮动元素的父元素添加 after 伪类，给 after 伪类设置样式 clear:both。

可以给所有浮动元素的父元素一个 clearfix 的类名，当一个元素需要清除浮动的时候，直接设置 clearfix 类名即可。
```

```
.clearfix:after{
    content:"";      /* 必须拥有content属性  内容为空*/
    display: block;  /* 必须块标签才能清浮动 */
    clear: both;     /* 清除浮动* /
}
```



























### 4.4、BFC介绍

```xml
BFC(Block Formatting Context) 块级格式化环境
		开启BFC该元素会变成一个 独立 的布局区域
特点：
	1、不被浮动元素覆盖
	2、子元素和父元素外边距不会重叠
	3、可以包含浮动的元素
开启：
	1、设置行内块（不推荐）
	2、设置浮动（不推荐）
	3、设置overflow为非visible（hidden）
```



### 4.5、BFC

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        .box1{
            width: 200px;
            height: 200px;
            background-color: #bfa;
            /* float: left; */
            overflow: hidden;
        }

        .box2{
            width: 200px;
            height: 200px;
            background-color: orange;
            overflow: hidden;
        }

        .box3{
            width: 100px;
            height: 100px;
            background-color: yellow;
            margin-top: 100px;
        }
    </style>
</head>
<body>

    <div class="box1">

        <div class="box3"></div>
    </div>

    <!-- <div class="box2">

    </div> -->
    
</body>
</html>
```



### 4.6、clear

```xml
清除（左侧，右侧，最大）浮动元素对当前元素产生的影响
clear：
	left，right，both

原理：
  设置清除浮动以后，浏览器会自动为元素添加一个上外边距，
  以使其位置不受其他元素的影响
```

### 4.7、高度坍塌最终解决方案

```xml
            /* overflow: hidden; */
```



### 4.8、clearfix

不理解，记

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        .box1{
            width: 200px;
            height: 200px;
            background-color: #bfa;
        }

        /* .box1::before{
            content: '';
            display: table;
        } */

        .box2{
            width: 100px;
            height: 100px;
            background-color: orange;
            margin-top: 100px;
        }

/* clearfix 这个样式可以同时解决高度塌陷和外边距重叠的问题，当你在遇到这些问题时，直接使用clearfix这个类即可 */
        .clearfix::before,
        .clearfix::after{
            content: '';
            display: table;
            clear: both;
        }
    </style>
</head>
<body>

    <div class="box1 clearfix">
        <div class="box2"></div>
    </div>
    
</body>
</html>
```



## 5、position

定位简介

+ 高级布局手段
+ 摆放到任意位置

```xml
设定：
	position：
			static 默认值，元素是静止的没有开启定位
            relative 开启元素 相对定位
            absolute 开启元素 绝对定位
            fixed 开启元素 固定定位
            sticky 开启元素 粘滞定位
```

### 5.1、相对~

```xml
特点；
		  1.要设置偏移量元素（offset：top，bottom，left，right）
        2.参照系是文档流
        3.提升元素层级
        4.不会使元素脱离文档流
        5.（元素性质不变）不会改变元素的性质块还是块，行内还是行内
```

### 5.2、绝对~

```xml
绝对定位
        开启：
			position：
					absolute
        特点：
        1.设置偏移量（top，bottom，left，right）
        2.脱离文档流
        3.（元素性质改变）行内变成块，块的宽高被内容撑开
        4.元素提升一个层级
        5.参照系是其包含‘块’

        包含块( containing block )
        
        - 绝对定位的包含块:
                        最近 且 开启定位 祖先元素，
                        否则根元素

								扩展 
									正常情况下：

                                    包含块就是离当前元素最近的祖先块元素
                                    <div> <div></div> </div>
                                    <div><span><em>hello</em></span></div>

        							html（根元素、初始包含块）

```



### 5.3、固定~

position:

​			fixed;

特点：

​		**参照系为视口**

​		属于绝对定位，特点相似

### 5.4、粘滞~

position：

​				sticky；



​		粘滞定位到达某个位置时**固定**

分别指定 top, right, bottom , left ，滚动至距窗口生效

### 5.5、绝对~元素水平布局

开启绝对定位后，水平方向新增

​														left，right

​								垂直方向新增

​														top，bottom

### 5.6、元素层级

**z-index**（定位元素生效）

​				设置元素层级（越大越高）

```
全定位元素有层级，初相同，后面盖住前面

显示层级受包含块影响

可以为负
```

### 5.7、定位元素居中

#### 方案一

```
left:50%
top:50%
margin-left:-xx;
margin-top:-xx;

```



#### 方案二

```
left:0
right:0
margin:0 auto;
```









### 999、练习

**京东轮播图**

![image-20210208125024979](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210208125024979.png)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <link rel="stylesheet" href="./css/reset.css">
    <style>
        /* 设置图片的容器 */
        .img-list{
            width: 590px;
            height: 470px;
            margin: 100px auto;

/* 
            为ul开启相对定位，目的是使ul中的pointer可以相对于ul定位而不是相对于初始包含块（html）去定位
 */
            position: relative;

        }

        /* 设置li */
        .img-list li{
            position: absolute;
        }

        /* 通过修改元素的层级来显示指定的图片 */
        .img-list li:nth-child(6){
            z-index: 8;
        }



        /* 设置导航点的样式 */
        .pointer{
            position: absolute;
            z-index: 9999;
            bottom: 20px;
            left: 40px;
        }

        .pointer a{
            /* 设置元素向左浮动 */
            float: left;
            width: 10px;
            height: 10px;
            margin: 0px 2px;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, .3);
            /* 将背景颜色值设置到内容区，边框和内边距不在有背景颜色 */
            background-clip: content-box;
            border: 2px solid transparent;
        }

        .pointer a.active,
        .pointer a:hover{
            background-color: #fff;
            border: 2px solid  rgba(255, 255, 255, .3);
        }


    </style> 
</head>
<body>
    <ul class="img-list">
        <li><a href="javascript:;"><img src="./img/05/1.jpg"></a></li>
        <li><a href="javascript:;"><img src="./img/05/2.jpg"></a></li>
        <li><a href="javascript:;"><img src="./img/05/3.jpg"></a></li>
        <li><a href="javascript:;"><img src="./img/05/4.jpg"></a></li>
        <li><a href="javascript:;"><img src="./img/05/5.jpg"></a></li>
        <li><a href="javascript:;"><img src="./img/05/6.jpg"></a></li>
        <li><a href="javascript:;"><img src="./img/05/7.jpg"></a></li>
        <li><a href="javascript:;"><img src="./img/05/8.jpg"></a></li>

        <div class="pointer">
            <a class="active" href="javascript:;"></a>
            <a href="javascript:;"></a>
            <a href="javascript:;"></a>
            <a href="javascript:;"></a>
            <a href="javascript:;"></a>
            <a href="javascript:;"></a>
            <a href="javascript:;"></a>
            <a href="javascript:;"></a>
        </div>
    </ul>
</body>
</html>
```

**总结** 

+ 导航点颜色

  background-color: rgba(255, 255, 255, .3)

  

+ a标签设置浮动float  ？？

```xml
1、行内元素不能 设置 宽高
2、开启绝对定位导致 脱离文档流
```



+ /* 将背景颜色值设置到内容区，边框和内边距不在有背景颜色 */
              background-clip

  ​										: content-box;

## 6、font&background

### 6.1、font基本属性

```html
    color				字体颜色
    font-size 	字体大小
                em 当前元素的一个font-size
                rem 根元素的一个font-size
    font-family 字体族（字体格式）
                可选值：
                    serif  				衬线字体
                        sans-serif 			非衬线字体（横竖笔画粗细相当）
                        monospace 			等宽字体


    font-family 
                  指定多个，逗号隔开，顺序优先
                            Microsoft YaHei,Heiti SC,tahoma,arial,Hiragino Sans GB,"\5B8B\4F53",sans-																serif

                            font-family: myfont;
```

```html
font-face   下载字体给用户使用 

（style内指定）
@font-face {
		/* 指定字体的名字 */
		font-family:'myfont' ;
		/* 服务器中字体的路径 */
		src: url('./font/ZCOOLKuaiLe-Regular.ttf') format("truetype");
}
```



### 6.2、图标字体

```html
图标字体（iconfont）
            - 在网页中经常需要使用一些图标，可以通过图片来引入图标
                但是图片大小本身比较大，并且非常的不灵活
            - 所以在使用图标时，我们还可以将图标直接设置为字体，
                然后通过font-face的形式来对字体进行引入
            - 这样我们就可以通过使用字体的形式来使用图标

        fontawesome 使用步骤
            1.下载 https://fontawesome.com/
            2.解压
            3.将css和webfonts移动到项目中
            4.将all.css引入到网页中
            5.使用图标字体
                - 直接通过类名来使用图标字体
                    class="fas fa-bell"
                    class="fab fa-accessible-icon"
（i <==> span）
<i class="fas fa-bell" style="font-size:80px; color:red;"></i>

```

```html
<style>
        i::before{
            /* 
                通过伪元素来设置图标字体
                    1.找到要设置图标的元素通过before或after选中
                    2.在content中设置字体的编码
                    3.设置字体的样式
                        fab
                        font-family: 'Font Awesome 5 Brands';

                        fas
                        font-family: 'Font Awesome 5 Free';
                        font-weight: 900; 

            */
            content: '\f1b0';
            /* font-family: 'Font Awesome 5 Brands'; */
            font-family: 'Font Awesome 5 Free';
            font-weight: 900; 
            color: blue;
            margin-right: 10px;
        }
</style>
```

### 6.3、iconfont（阿里库）

使用图标字体

​			1、添加入库

![image-20210209003355555](image-20210209003355555.png)

​			2、添加到项目

![image-20210209003537982](image-20210209003537982.png)

3、下载到本地

4、引入iconfont.css

![image-20210209003811982](image-20210209003811982.png)

5、使用

#### 问题

1、绝对路径引入不行

![image-20210209010604043](image-20210209010604043.png)

### 6.4、行高

```html
 			font-size: 50px;

            /* 可以将行高设置为和高度一样的值，使单行文字在一个元素中垂直居中 */
            line-height: 200px;

            /* 
                行高（line height）


                    - 行高指文字占有实际高度,
										可用来撑起父元素


                    - 可以通过line-height来设置行高
                        行高可以直接指定一个大小（px em）

                        也可以直接为行高设置一个整数

                            如果是一个整数的话
														行高将会是字体的指定的倍数

                    - 行高经常还用来设置文字的行间距
                        行间距 = 行高 - 字体大小

                字体框
                    - 字体框就是字体存在的格子，设置font-size实际上就是在设置字体框的高度

                行高会在字体框的上下平均分配
```

![image-20210312212153918](前端基础/image-20210312212153918.png)

>   简单理解: 行高的上空隙和下空隙把文字挤到中间了. 是如果行高小于盒子高度,文字会偏上,如果行高大于盒子高度,则文字偏下







### 6.5、简写

```html
body { 

		//按此顺序

		//font-size、font-family 必有，否 font属性无用
  	//字号、字体同现

 		font:  font-style  font-weight  font-size/line-height  font-family; 

}
```

### 6.6、文本的水平和垂直对齐

父元素设置

```xml
text-align 文本的水平对齐
                    可选值：
                        left 左侧对齐
                        right 右对齐
                        center 居中对齐
                        justify 两端对齐
```



子元素设置

```xml
 vertical-align 设置元素垂直对齐的方式
                    可选值：
                        baseline 默认值 基线对齐
                        top 顶部对齐
                        bottom 底部对齐
                        middle 居中对齐
注：
	图片因基线与边框有缝隙，设置vertical-align消除
```

vertical-align 垂直对其方式（行内、行内块有效）

```
baseline： 将支持valign特性的对象的内容与基线对齐 
sub： 垂直对齐文本的下标 
super： 垂直对齐文本的上标 
top： 将支持valign特性的对象的内容与对象顶端对齐 
text-top： 将支持valign特性的对象的文本与对象顶端对齐 
middle： 将支持valign特性的对象的内容与对象中部对齐 
bottom： 将支持valign特性的对象的文本与对象底端对齐 
text-bottom： 将支持valign特性的对象的文本与对象顶端对齐 
<percentage>： 用百分比指定由基线算起的偏移量。可以为负值。基线对于百分数来说就是0%。 
<length>： 用长度值指定由基线算起的偏移量。可以为负值。基线对于数值来说为0。（CSS2）
```

![image-20210304130054052](前端基础.assets/image-20210304130054052.png)



### 6.8、其他文本样式

```xml
			text-decoration 设置文本修饰
                    可选值：
                        none 什么都没有
                        underline 下划线
                        line-through 删除线
                        overline 上划线
            */

            /* text-decoration: overline; */

            /* text-decoration: underline red dotted; */
```

```xml
			white-space 设置网页如何处理空白
                    可选值：
                        normal 正常
                        nowrap 不换行
                        pre 保留空白
```

```
letter-spacing: 20px;       字母间距

word-spacing: 20px;			 设置词间距

text-indent: 2em;				 设置首行缩进的距离
```

```
font-weight 字重 字体的加粗 
                可选值：
                    normal 			（400）默认
                    lighter 		细
                    bold 				（700）加粗
                    100-900 九个级别（100-300细体，400、500正常，600以上粗体）

font-style 字体的风格
                    normal 正常的
                    italic 斜体（字体本身斜体）
						  oblique  斜体（强制）
 
font-variant: 字体变形 
							normal | small-caps（小写转 小型大写字体）
							
text-transform：
				
					none： 无转换 
					capitalize： 将每个单词的第一个字母转换成大写 
					uppercase： 将每个单词转换成大写 
					lowercase： 将每个单词转换成小写 
					
					。。。。。。。。
```

#### **多余内容省略**

```xml
			width: 200px;
			white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
```

![image-20210209021409524](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210209021409524.png)

#### **禁止文字选中**

```
        /* 禁止选中文字 */
         user-select: none;
```



### 6.9、练习（京东顶部导航条）

![image-20210209173148053](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210209173148053.png)

#### 6.9.1、结构

```html
<div class="top_bar_wrapper">
        <div class="top_bar">
            <div class="location"><i class="fas fa-map-marker-alt"></i><a>北京</a></div>

            <ul class="shortcut">
                <li><a href="#">你好，请登录</a><a href="#">免费注册</a></li>
                <div class="line"></div>
                <li><a href="#">我的订单</a></li>
                <div class="line"></div>
                <li><a href="#">我的京东</a><i class="fas fa-angle-down"></i></li>

                <div class="line"></div>
                <li><a href="#">京东会员</a></li>

                <div class="line"></div>
                <li><a href="#">企业采购</a><i class="fas fa-angle-down"></i></li>

                <div class="line"></div>
                <li><span>客户服务</span><i class="fas fa-angle-down"></i></li>

                <div class="line"></div>
                <li><span>网站导航</span><i class="fas fa-angle-down"></i></li>

                <div class="line"></div>
                <li><span>手机京东</span></li>

            </ul>

        </div>
    </div>
```

#### 6.9.2、基本样式，总结

**设置字体颜色**

​		优先级（选择器多，高）

​		注意空格（类	标签，标签类，类	类）

​		仅子元素有效（第一个）

​		

![image-20210209221831094](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210209221831094.png)

代码

```css
.top_bar_wrapper {
    background-color: #E3E4E5;
    color: #999999;
}

/* 设置字体样式 */
body{
    font: 10px/1.5 Microsoft YaHei,Heiti SC,tahoma,arial,Hiragino Sans GB,"\5B8B\4F53",sans-serif;

}
.top_bar a.highlight,
.top_bar_wrapper a:hover{
    color: #F10125;
}

.location a,
.shortcut a,
.shortcut span{
    color: #999999;
    text-decoration: none;
}

.top_bar {
    margin: 0 auto;
    width: 1190px;
    line-height: 30px;
}
.location i{
    color:red;
}

.location {
    float: left;
}

.shortcut {
    float: right;
}
.shortcut li
{
    float: left;
}
.line{
    width: 1px;
    height: 10px;
    border: rgb(105, 104, 104);
    background-color: rgb(204, 202, 202);
    margin:6px 11px 0 ;
}
.clearfix::before,
.clearfix::after {
    content: '';
    display: table;
    clear: both;
}
```

#### 6.9.3、下拉框(全部代码)

```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>京东顶部导航条</title>
    <!-- 引入重置样式表 -->
    <link rel="stylesheet" href="./css/reset.css">
    <!-- 引用图标字体 -->
    <link rel="stylesheet" href="./fa/css/all.css">

    <style>

       

        .clearfix::before,
        .clearfix::after{
            content: '';
            display: table;
            clear: both;
        }
        /* 设置字体样式 */
        body{
            /* 设置字体 */
            font:12px/1.5 Microsoft YaHei,Heiti SC,tahoma,arial,Hiragino Sans GB,"\5B8B\4F53",sans-serif;
        }

        /* 设置外部容器的样式 */
        .top-bar-wrapper{
            /* 设置宽度 */
            width: 100%;
            /* 设置背景颜色 */
            background-color: #E3E4E5;
            height: 30px;
            /* 设置行高，没有设置高度 使文字垂直居中 */
            line-height: 30px;
            /* 设置下边框 */
            border-bottom: 1px #ddd solid
        }

        /* 设置内部容器的样式 */
        .top-bar{
            /* 固定宽度 */
            width: 1190px;
            /* 设置水平居中 */
            margin: 0 auto;

            position: relative;
        }

        
        /* 设置字体样式 */
        .top-bar a ,
        .top-bar span,
        .top-bar i{
            color: #999;
            text-decoration: none;
        }

        .top-bar a:hover,
        .top-bar a.highlight{
            color: #f10215;
        }

        /* 设置location */
        .location{
            float: left;
        }
    
        /* 设置location下的小图标 */
        .location .fas{
            color: #f10215;
        }

        /* 设置城市列表的效果 */
        .location .city-list{
            display: none;
            width: 320px;
            height: 436px;
            background-color: white;
            border: 1px solid rgb(204, 204, 204);
            /* 设置绝对定位，使其不占据页面的位置 */
            position: absolute;
            top:31px;
            z-index: 999;
            box-shadow: 0 2px 2px rgba(0, 0, 0, .2)
        }

        /* 当鼠标移入到location时，让city-list显示 */
        .location:hover .city-list{
            display: block;
        }

        .current-city{
            padding: 0 10px;

            border: 1px solid transparent;
            border-bottom: none;
            

            position: relative;

            z-index: 9999;
        }
        /* 设置current-city的移入的效果 */
        .location:hover .current-city{
            background-color: white;
            border: 1px solid rgb(204, 204, 204);
            border-bottom: none;
            padding-bottom: 1px;
        }

        

        /* 设置shortcut */
        .shortcut{
            float: right;
        }

        /* 设置分割线 */
        .shortcut .line{
            width: 1px;
            height: 10px;
            background-color: rgb(204, 202, 202);
            margin: 12px 12px 0;
        }

        /* 设置li */
        .shortcut li{
            float: left;
        }


    </style>
</head>

<body>
    <!-- 创建外围的容器 -->
    <div class="top-bar-wrapper">
        <!-- 创建内部容器 -->
        <div class="top-bar clearfix">
            <!-- 左侧的菜单 -->
            <div class="location">
                <div class="current-city">
                    <i class="fas fa-map-marker-alt"></i>
                    <a href="javascript:;">北京</a>
                </div>

                <!-- 放置城市列表的div -->
                <div class="city-list">

                </div>
            </div>

            <!-- 右侧的菜单 -->
            <ul class="shortcut clearfix">
                <li>
                    <a href="javascript:;">你好，请登录</a>
                    <a class="highlight" href="javascript:;">免费注册</a>
                </li>

                <!-- 分割线 -->
                <li class="line"></li>
                <li><a href="javascript:;">我的订单</a></li>

                <li class="line"></li>
                <li>
                    <a href="javascript:;">我的京东</a>
                    <i class="fas fa-angle-down"></i>
                </li>


                <li class="line"></li>
                <li><a href="javascript:;">京东会员</a></li>

                <li class="line"></li>
                <li>
                    <a class="highlight" href="javascript:;">企业采购</a>
                    <i class="fas fa-angle-down"></i>
                </li>



                <li class="line"></li>
                <li>
                    <span>客户服务</span>
                    <i class="fas fa-angle-down"></i>
                </li>

                <li class="line"></li>
                <li>
                    <span>网站导航</span>
                    <i class="fas fa-angle-down"></i>
                </li>

                <li class="line"></li>
                <li>
                    <span>手机京东</span>
                </li>
            </ul>
        </div>
    </div>
</body>

</html>
```



#### 6.9.4、总结

1. 子元素层级 >>> 父元素层级
2. positon（自己的） 的top，left，right，bottom距父元素距离
3. z-index（开启定位生效）

### 6.10、PS 2019

+ 标尺 ：ctr+r
+ 界面选项 -> 单位设置：像素
+ F8，显示信息
+ 切图：矩形选中—>图像—>裁剪
+ 按住空格键，鼠标可以变成小手，拖动 PS 视图
+ ![image-20210324143637263](TyporaImg/image-20210324143637263.png)
+ ![image-20210324143417781](TyporaImg/image-20210324143417781.png)

**小工具**

```
十字移动工具

抓手:
移动整张图

文字:
修改文字

标尺(ctrl + r):
拖动辅助线
```



**切图**

PS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。

```
图层切图
最简单的切图方式：选择十字移动工具 , 右击选中图层 , 导出 PNG 切片。

合并图层
选中图层 , 隔离图层 , ctrl或shift选中多图层 , 图层 , 合并图层 , 到处png



切片切图
1. 右击切片工具 , 选择切片工具 , 切片
2. 文件 , 导出 , 导出为旧版.. ,存储 , (注意:选中切片)
底色透明找到最低下取消背景 , (png支持透明色)
jepg纯色 , gif(color不好看),png支持透明色




PS 插件切图
Cutterman 是一款运行在 Photoshop 中的插件，能够自动将你需要的图层进行输出，以替代传统的手工
"导出 web 所用格式" 以及使用切片工具进行挨个切图的繁琐流程。
官网：http://www.cutterman.cn/zh/cutterman
注意：Cutterman 插件要求你的 PS 必须是完整版，不能是绿色版，所以大家需要安装完整版本。
```









**【附录】PS 切图**(铭哥)



找到对应的图层

![img](前端基础.assets/找到对应的图层.png)

>   **注意：**
>
>   在图层处右键选择复制 css，可以获取到 css。

4 获取图层的尺寸

![img](前端基础.assets/获取图层尺寸.png)

5 获取字体和字号

![img](前端基础.assets/获取字体和字号.png)

6. 切图

![img](前端基础.assets/切图1.png)

![img](前端基础.assets/切图2.png)

![img](前端基础.assets/切图3.png)





### 6.11、背景

```html
background-color	背景颜色

background-image 	背景图片 
                    - 可同时设置背景图片和背景颜色
                    - 当背景图片小于元素，自动铺满
                    - 当背景图片大于元素，无法完全显示
                    - 背景图片和元素一样大，正常显示
background-image: 	url("./img/1.png");
	
background-repeat 	设置背景的重复
                    可选值：
                        repeat 默认值 ， 背景会沿着x轴 y轴双方向重复
                        repeat-x x轴方向重复
                        repeat-y y轴方向重复
                        no-repeat 不重复
background-repeat: 	no-repeat;

background-position 设置背景图片位置
                    设置方式：
                        通过 top left right bottom center 设置
                            须指定两个值，否则第二个默认就是center

                        通过偏移量来指定背景图片的位置：
                            水平 方向的偏移量
							垂直 方向变量
					/* background-position: center; */
           		 	background-position: -50px 300px;

						百分比形式：
								（坑），先找自身百分比点，再与父元素百分比点重合

```

```html
设置背景的范围 
                    background-clip 
                        可选值：
                            border-box 	边框里也显示（默认）
                            padding-box 内容区和内边距显示
                            content-box 内容区显示

                    background-origin 	背景图片的偏移量计算的原点
                            padding-box 内边距处计算，默认值
                            content-box 内容区处计算
                            border-box 	边框处开始计算

background-size 	设置背景图片的大小
                    	宽度,第一个值
                    	高度,第二个值
                     	只写一个,第二个值默认auto

                    cover 	铺满长边
                    contain 铺满短边


background-color
                    background-image
                    background-repeat
                    background-position
                    background-size
                    background-origin
                    background-clip
                    background-attachment



background-attachment
                - 背景图片是否跟随元素移动
                - 可选值：
                    scroll 	默认值 背景图片会跟随元素移动
                    fixed 	背景会固定在页面中，不会随元素移动
```

**简写：**

```css
没有特定书写顺序

background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;

background: transparent  url(image.jpg)  repeat-y  fixed  top/contain(位置/大小) ;
这是实际开发中，我们更提倡的写法。
```



### 6.12、练习（背景）

#### 1.12.1、渐变背景条

![image-20210211145042238](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210211145042238.png)

![image-20210211145056183](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210211145056183.png)

#### 1.12.2、蓝色按钮

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        a:link{
            display: block;
            width: 93px;
            height: 29px;
            background-image: url('img/08/btn.png');
        }
        a:hover{
            background-position-x: -93px;
            background-image: url('img/08/btn.png');
        }
        a:active{
            background-position-x: -186px;
            background-image: url('img/08/btn.png');

        }
    </style>
</head>
<body>
    <a href="#"></a>
</body>
</html>
```

![image-20210211150753270](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210211150753270.png)







### 6.13、线性渐变

```html
设置：
	background-image: repeating-linear-gradient( xx , xx , xx )

	沿直线发生变化
	linear-gradient()

	linear-gradient(red,yellow) 红色开头，黄色结尾，中间过渡

	线性渐变的开头，我们可以指定一个渐变的方向
                        to left
                        to right
                        to bottom
                        to top
                        xxxdeg deg表示度数
                        xxxturn 表示圈
	
	
	可以平铺的线性渐变
	repeating-linear-gradient() 
```





### 6.14、径向渐变

```html
	放射渐变
	radial-gradient() 

	径向渐变形状依照元素的形状（默认）
                    正方形 --> 圆形
                    长方形 --> 椭圆形
                    - 可手动指定径向渐变的大小
                    circle
                    ellipse

                    - 也可以指定渐变的位置
                    - 语法：
                        radial-gradient(大小 at 位置, 颜色 位置 ,颜色 位置 ,颜色 位置)
                            大小：
                                circle 圆形
                                ellipse 椭圆
                                closest-side 近边	
                                closest-corner 近角
                                farthest-side 远边
                                farthest-corner 远角

                            位置：
                                top right left center bottom

            background-image: radial-gradient(farthest-corner at top, red , #bfa);
            /* background-image: radial-gradient(farthest-corner at 100px 100px, red , #bfa) */
```

### 6.15 练习（电影卡片）

#### 问题1

设置阴影（0 0 加减失效）无效

```html
.outer{
            box-shadow: 0 0 10px #717171;
```

#### 问题2

子元素浮动，父元素设宽高失败

![image-20210216110755163](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210216110755163.png)

![image-20210216110822042](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210216110822042.png)

#### 问题3

图标 = 行内元素

## 7、HTML

### 7.1、表格

#### 普通表格

```html
<table>
	<tr>
		<!-- 纵向 合并单元格 -->
		<td rowspan="2">   
		</td>
		<!-- 横向 合并单元格 -->
		<td colspan="2">
		</td>
	</tr>
</table>
	 <!--表格标题-->
    <caption>组织成员信息</caption>
```

#### 长表格

```
<!-- 
            一个表格分成三个部分：
                头部 thead
                主体 tbody
                底部 tfoot

                th 表示头部的单元格
 -->
<thead>
    <tr>
        <th>日期</th>
    </tr>
</thead>
<tbody>					（一般省略，浏览器加）
    <tr>
    </tr>
</tbody>
<tfoot>
    <tr>
    </tr>
</tfoot>
```



#### 与div区别

![image-20210306160955640](前端基础.assets/image-20210306160955640.png)



```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .t{
            height: 30px;
            background-color: #000;
        }
    </style>
</head>
<body>
    <table class="t"></table>
    <div class="t"></div>
</body>
</html>
```

















### 7.2、table属性（行内式）

 border：
                  width：
                  height：
                  cellspacing：（单元格距离）默2
                  cellpadding：（td补白）默1

​              align：
​              valign:(middle)

​              colspan:
​              rowspan:

### 7.3、表格css属性

```HTML
 border-spacing:
 					边框之间距离 
					
 border-collapse:
					collapse
					separate（默认）
					设置边框合并

table-layout:
					auto
					fixed(固定)
					设置表格布局方式，用于固定列宽

caption-side:
					top
					bottom
					表格表题位置

empty-cells:
					show
					hide
					设置没有内容的单元格隐藏还是现实
					
  vertical-align	（比较特殊，非自身设置）
               middle;
                        


```

tips：

```
 将元素设置为单元格 td
            使用单元格属性
               display: table-cell;
               vertical-align: middle;
```





### 7.4、表单

```html
form	属性
      action  提交地址
		method  提交方式
		target  同超链接

input	属性
      name(标识 , 区分一个页面多个表单)
      value(数据值)
		maxlength（限制输入）
/*文本*/
<input type="text" name="username">


/*文本域*/
<textarea rows="10" cols="60"></textarea>



/*密码*/
<input type="password" name="password">


/*单选*/
<input type="radio" name="hello" value="a">
<input type="radio" name="hello" value="b" checked>


/*多选*/
<input type="checkbox" name="test" value="1">
<input type="checkbox" name="test" value="2">
<input type="checkbox" name="test" value="3" checked>


/*下拉*/
<select name="haha">
   <option value="i">选项一</option>
   <option selected value="ii">选项二</option>
   <option value="iii">选项三</option>
</select>


/*提交*/
<input type="submit" value="注册">
/*重置*/
reset
/*普纽*/
button
```

```html
autocomplete="off" 		不自动补全
readonly 				将表单项设置为只读，数据 会提交
disabled 				将表单项设置为禁用，数据 不会提交
autofocus 				表单项自动获取焦点
```

#### 1、技巧：label标签（点文字获取焦点）

```
文本、密码、域、下拉 点击文字自动聚焦
<label for="addressInput">地址：</label>
<input type="text" id="addressInput">

单选、复选 自动聚焦
<label>
    <input type="radio" name="sex">女
</label>
<label>
    <input type="radio" name="sex">男
</label>
<label>
    <input type="radio" name="sex">其他
</label>
```

#### 2、fieldset、legend（过时）

```
<form action="1.php">
	<fieldset>
		<legend>表单的标题</legend>（ledendn. 说明；图例；刻印文字; ）
        
        表单控件....
    </fieldset>
</form>
```

![image-20210302102101967](image-20210302102101967.png)

## 8、小米项目

```
mi（文件结构）
	css
		base.css		(公共样式)
		index.css		（写首页够意思）
		reset.css		（重置）
	fa
	img
```

### 问题

#### 1、a标签内

​		文字颜色设置失败。

​		1.样式重叠。

​		2.选择错误:hover之前要空格

#### 2、各浏览器界面大小不同



#### 3、背景无颜色，父元素坍塌

#### 4、:hover双标

![image-20210217191147883](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210217191147883.png)

（因为元素标签，所以空格）（错）

![image-20210217191307507](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210217191307507.png)

（本该如此）

:hover,空格表示

​							后代元素

​			不空表示

​							本身。



#### 5、color设置失败

![image-20210218150026119](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210218150026119.png)

![image-20210218150059335](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210218150059335.png)



#### 6、垂直居中设置失败

```
.prev-next a{
    /* 设不设置都可以，绝对定位后不分行内和块 */
    /* display: block; */
    position: absolute;
    /* width: 2px;
    height: 2px; */
    top: 0;
    bottom: 0;
    margin: auto 0;
}
```

解决：

​			设置宽高后成功。

#### 7、三角溢出隐藏

解决：（weng想覆盖浮动元素)

![image-20210221174353176](image-20210221174353176.png)

![image-20210221174424466](image-20210221174424466.png)

![image-20210221174524877](image-20210221174524877.png)



​           

#### 8、遮盖浮动元素

```
/* 移入层级不生效？文档元素 weng想覆盖 浮动元素 */

 z-index: 101;/* 如何解决移入下面内容下移？ */
```

#### 9、图标大小

解决：（time空格第二子元素）。

![image-20210227012139808](image-20210227012139808.png)

#### 10、reset无效

```css
/* 引入reset，还有margin？ */
        div{
            width: 100px;height: 100px;
            background-color: black;
}
```

#### 11、bfa无效

解决：（空格）

```css
#time{
    border-top: red 1px solid;
    /* bfa 无效？*/
    overflow: hidden;
}

#time :nth-child(1){		/*又是空格问题*/
    color: #ef3a3b;
    text-align: center;
    font-size:21px;
    /* padding-top: 50px; */
    margin-top: 50px;
}
```



#### 12、哪设置nth-child？(关系选择器大问题)

```css
 					<li id="time">
                    <div>00:00 场</div>
                    <i class="fas fa-bolt"></i>
        
                    <div id="aa">
                        <!-- 哪设置margin？ -->
                        <div></div>
                        <div></div>
                        <div></div>
                    </div>
                </li>

css:
	#time :nth-child(3){
    margin: 0 auto;
    width: 200px;
    height: 50px;
    background-color: #cfccca;
    /*  */
    overflow: hidden;
}

```

#### 13、下部container容器

解决（结构、命名为**好选择元素**服务，**见名之意**）（直接边做边试）

![image-20210227200500176](image-20210227200500176.png)

#### 14、全部设计好结构（凌乱）

不知道是否有这种感觉。



#### 15、选择子元素隔开

解决：（选择子元素不能被其它隔开）不可以，选择全部可以（没有nth-child（））



更新：（：nth-child选择东西不能被隔开），首尾隔开都不行



更新：21.3.12（交集选择器，1是i标签，2是兄弟元素中第几个）

> 注意：选择第？个

```css
.time-games-box>i:nth-child(1){
    color: #ef3a3b;
    font-size: 21px;
}
.time-games-box>i:nth-child(2){
    /* color: rgba(0, 0, 0, .54); */
    color: red;
    font-size: 35px;
```

选择成功

![image-20210228100736775](image-20210228100736775.png)

选择失败

![image-20210228100924067](image-20210228100924067.png)



#### 16、行内元素无margin、padding？



![image-20210228102829934](image-20210228102829934.png)



#### 17、a标签易设成block





#### 18、文字图垂直居中不齐

解决：（vertical-align，line-height）

![image-20210304124556967](前端基础.assets/image-20210304124556967.png)





### 总结

#### 1、纯css三角

![image-20210217170752196](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210217170752196.png)

#### 2、缓慢弹出

```
除**diaplay:none**方式

								**height：0；**

								**overflow:hidden(隐藏起来)**

								

								**/* transition: 用于为样式设置过渡效果 */**

  								**transition: height 0.3s;
```

#### 3、title="小米"

鼠标移动显示**小米**



#### 4、文本框，按钮默认有东西

边框，内边距

![image-20210218165911560](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210218165911560.png)

按钮默认box-sizing: border-box

![image-20210218170223358](D:\A_YuHaiWei\A_Html_5\笔记&项目\前端基础笔记\image-20210218170223358.png)

**聚焦蓝色轮廓**

outline属性



#### 5、右侧工具条

```css
/* 
        布局的等式
            left + margin-left + width + margin-right + right = 视口的宽度

            auto + 0 + 26 + 0 + 60 = 视口宽度

            auto + 0 + 26 + -639px + 50% = 视口宽度
    */
```

![image-20210220151928387](image-20210220151928387.png)

#### 6、bfa

解决外边距折叠。

#### 7、项目补充

###### 官网图标

![image-20210221114944758](image-20210221114944758.png)

```
<!-- 
        设置网站的图标（在标题栏和收藏栏）
            - 网站图片一般都存储在网站的根目录下，名字一般都叫做 favicon.ico

     -->
    <link rel="icon" href="./favicon.ico">
    
    
    
在线工具 http://www.ico51.cn/
在线工具 http://www.bitbug.net/
```

###### css压缩

插件：

![image-20210221115201520](image-20210221115201520.png)

使用：

选中css文档，按F1，输入minify，选择minifyducment

#### 8、文本多余省略

```
/* 文本一行省略 */

  overflow: hidden;

  white-space: nowrap;

  text-overflow: ellipsis;
```



## 9、animation（动画）

### 9 .1、过渡

```

                过渡（transition）
                    
            
             transition-property: 
             					指定过渡
                                        多属性,隔开 
                                        all（全部）
                
            /* transition-property: height , width; */
            /* transition-property: all; */

           
              transition-duration: 
              					指定过渡效果的持续时间
              
      
             /* transition-duration: 100ms, 2s; */
            

     
             transition-timing-function: 
             					过渡的时序函数
                                            指定过渡方式  
                                            可选值：
                                                ease 默认值，慢速开始，先加速，再减速
                                                linear 
                                                ease-in 
                                                ease-out 
                                                ease-in-out 
                                                cubic-bezier() 指定时序函数
                                                    https://cubic-bezier.com
                                                steps() 分步执行过渡效果
                                                    可以设置一个第二个值：
                                                        end ， 时间分为几段，第一段结束开始过度(默认值)
                                                        start ， 时间分为几段，第一段开始时过度
          
             /* transition-timing-function: cubic-bezier(.24,.95,.82,-0.88); */
             /* transition-timing-function: steps(2, start); */


            
             transition-delay: 过渡效果的延迟，等待一段时间后在执行过渡  
           
             /* transition-delay: 2s; */
             

             transition 同时设置，
             					要求
             					两个时间中第一个是持续时间，
             					第二个是延迟 
             transition:2s margin-left 1s cubic-bezier(.24,.95,.82,-0.88);
```

时间 - 路程图

![image-20210222101623052](image-20210222101623052.png)



###   练习、米兔练习

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        div{
            width: 132px;
            height: 271px;
            background-image: url("img/11/bigtap-mitu-queue-big.png");
            margin: 0 auto;
            background-position-x: 0px;
            transition: 0.5s steps(4,end);
        }
        div:hover{
            background-position-x:-528px ;
        }
    </style>
</head>
<body>
    <div></div>
</body>
</html>
```

### 9.2、动画

```

设置关键帧  名字

@keyframes test {
            /* from表示动画的开始位置 也可以使用 0% */
            from{
                margin-left: 0;
                background-color: orange;
            } 

            /* to动画的结束位置 也可以使用100%*/
            to{
                background-color: red;
                margin-left: 700px;
            }
        }
```

```
animation:(设置属性)
```

```
animation-name:     关键帧名，test
```

```
animation-duration：  动画执行时间
```

```
animation-delay：     延时执行时间
```

```
animation-timing-function：    动画时间路程函数（过渡一致）
```

```
animation-iteration-count 动画执行的次数 
                可选值：
                    次数
                    infinite 无限执行
```

```
animation-direction
                指定动画运行的方向
                    可选值：
                    normal 默认值  从 from 向 to运行 每次都是这样 
                    reverse 从 to 向 from 运行 每次都是这样 
                    alternate 从 from 向 to运行 重复执行动画时反向执行
                    alternate-reverse 从 to 向 from运行 重复执行动画时反向执行
```

```
animation-play-state: 设置动画的执行状态 
                可选值：
                    running 默认值 动画执行
                    paused 动画暂停
```

```
animation-fill-mode: 动画的填充模式
                可选值：
                    none 默认值 动画执行完毕元素回到原来位置
                    forwards 动画执行完毕元素会停止在动画结束的位置
                    backwards 动画延时等待时，元素就会处于开始位置
                    both 结合了forwards 和 backwards
```

### 练习、奔跑的少年

```html
        div{
            /* width: 100px; */
            height: 256px;
            /* background-color: #bfa; */
            width: 256px;
            margin: 0 auto;
            background-image: url("../exercise/img/12/bg2.png");
            animation: myanimation steps(6) infinite 1s;

            /* animation-delay: 1s; */
        }
        @keyframes myanimation {
            from{
                background-position: 0 0;
            }
            to{
                background-position: -1536px 0;
            }
        }
```

### 9.3、自由落体小球

关键帧

```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .outer {
            height: 500px;
            overflow: hidden;
            border-bottom: 2px solid black;
        }

        .ball {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background-color: black;
            animation: ball 1s infinite ease-in-out;
        }

        @keyframes ball {
            from {
                margin-top: 0;
            }

            20% {
                margin-top: 400px;
            }

            40% {
                margin-top: 200px;
            }


            to {
                margin-top: 400px;
            }

        }
    </style>
</head>

<body>
    <div class="outer">
        <div class="ball"></div>
    </div>
</body>

</html>
```



### 9.4、变形平移

```
变形就是指通过CSS来改变元素的形状或位置
                -   变形不会影响到页面的布局
                - transform 用来设置元素的变形效果
                    - 平移：
                        translateX() 沿着x轴方向平移
                        translateY() 沿着y轴方向平移
                        translateZ() 沿着z轴方向平移
                            - 平移元素，百分比是相对于自身计算的
                            
                  /* transform: translateY(-100px); */
```

居中（适用元素大小确定）

```
.box3{
            background-color: orange;
            position: absolute;
            /* 
                这种居中方式，只适用于元素的大小确定
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            margin: auto; */

            left: 50%;
            top: 50%;
            transform: translateX(-50%) translateY(-50%);
          
        }
```

### 练习、移入浮动



```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body{
            background-color: whitesmoke;
        }
        div{
            float: left;
            margin: 20px 30px;
            width: 200px;
            height: 400px;
            background-color: white;
            transition: all 0.4s;
        }
        div:hover{
            transform: translateY(-6px);
            box-shadow:0 0 15px rgba(0,0,0,.6);
        }

    </style>
</head>
<body>
    <div></div>
    <div></div>
</body>
</html>
```

![image-20210222144654418](image-20210222144654418.png)





### 9.5、z轴平移

```
			   z轴平移，调整元素在z轴的位置，正常情况就是调整元素和人眼之间的距离，
                    距离越大，元素离人越近
                z轴平移属于立体效果（近大远小），默认情况下网页是不支持透视，如果需要看见效果
                    必须要设置网页的视距
                    
                    html{
                        /* 设置当前网页的视距为800px，人眼距离网页的距离 */
                        perspective: 800px;
                    }
```



### 9.5、旋转

```
通过旋转可以使元素沿着x y 或 z旋转指定的角度
                    rotateX()
                    rotateY()
                    rotateZ()
```



```
		   /* transform: rotateZ(.25turn); */
            /* transform: rotateY(180deg) translateZ(400px); */
            /* transform: translateZ(400px) rotateY(180deg) ; */
```



```
 		   /* 是否显示元素的背面 */
            backface-visibility: hidden;
```



### 练习、钟表

问题：

1、垂直居中。块元素如何？行内元素有行高。（解决：开启绝对定位）

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .clock{
            width: 400px;
            height: 400px;
            /* background-color: #bfa; */
            margin: 100px auto;
            border-radius: 50%;
            border: 8px solid black;
            position: relative;
            background-image: url("img/13/bg.png");
            background-size: contain;
        }
        .clock>div{
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: auto;
        }

        .hour-wrapper{
            width: 50%;
            height: 50%;
            /* background-color: #bfa; */
            /* margin:auto; */
            animation: clock 43200s ;
        }
        .hour-wrapper .hour{
            width: 8px;
            height: 50%;
            background-color: black;
            margin: 0 auto;
        }

        .minute-wrapper{
            width: 70%;
            height: 70%;
            /* background-color: #bfa; */
            /* margin:auto; */
            animation: clock 720s ;
        }
        .minute-wrapper .minute{
            width: 5px;
            height: 50%;
            background-color: black;
            margin: 0 auto;
        }

        .second-wrapper{
            width: 90%;
            height: 90%;
            /* background-color: #bfa; */
            /* margin:auto; */
            animation: clock 60s ;
        }
        .second-wrapper .second{
            width: 2px;
            height: 50%;
            background-color: black;
            margin: 0 auto;
        }



        @keyframes clock {
            from{
                transform: rotateZ(0);
            }
            to{
                transform: rotateZ(360deg);
            }
        }

    </style>
</head>
<body>
    <div class="clock">
        <div class="hour-wrapper">
            <div class="hour"></div>
        </div>
        <div class="minute-wrapper">
            <div class="minute"></div>
        </div>
        <div class="second-wrapper">
            <div class="second"></div>
        </div>

    </div>
</body>
</html>
```

### 练习、复仇者联盟

问题：div>img （div.margin:100px auto**居中失败**）（行内块不行）

```
<div>
        <img src="./img/14/1.jpg" alt="">
        <img src="./img/14/2.jpg" alt="">
        <img src="./img/14/3.jpg" alt="">
        <img src="./img/14/4.jpg" alt="">
        <img src="./img/14/5.jpg" alt="">
        <img src="./img/14/6.jpg" alt="">
</div>
```

![image-20210222204157225](image-20210222204157225.png)





问题：旋转失败（解：180度回到原位）

![image-20210222223740406](image-20210222223740406.png)

```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        * {
            margin: 0;
            padding: 0;
        }
		/* 容器设置高度 */
        html {
            perspective: 800px;
        }

        .outer {
            width: 200px;
            height: 200px;
            margin: 200px auto;
            /* background-color: #bfa; */
            /* 设置3d变形效果 */
            transform-style: preserve-3d;
            /* padding: 0 auto; */
            animation: infinite 20s rotate linear;
        }

        .outer div {
            position: absolute;
            /* top: 0; */
            /* 设置元素透明（强大）  */
            opacity: .5;
            /* 设置背面可见 */
            backface-visibility: visible;
        }
        img{
            vertical-align: top;
        }
        .a{
            transform: rotateX(90deg) translateZ(100px);
        }
        .b{
            transform: rotateX(-90deg) translateZ(100px);
        }
        .c{
            transform: rotateY(90deg) translateZ(100px);
        }
        .d{
            transform: rotateY(-90deg) translateZ(100px);
        }
        .e{
            transform: translateZ(100px)
        }
        .f{
            transform: translateZ(-100px);
        }
        @keyframes rotate {
            form{
                transform:rotateX(0) rotateZ(0)
            }

            to{
                transform:rotateX(1turn) rotateZ(1turn)
            }
        }
    </style>
</head>

<body>
    <div class="outer">
        <div class="a"><img src="./img/14/1.jpg" alt=""></div>
        <div class="b"><img src="./img/14/2.jpg" alt=""></div>
        <div class="c"><img src="./img/14/3.jpg" alt=""></div>
        <div class="d"><img src="./img/14/4.jpg" alt=""></div>
        <div class="e"><img src="./img/14/5.jpg" alt=""></div>
        <div class="f"><img src="./img/14/6.jpg" alt=""></div>
    </div>
</body>

</html>
```





**总结**：

+ 变形始终相对自己！
+ /* 容器设置高度 */
          html {
              perspective: 800px;
          }
+ /* 设置3d变形效果 */
              transform-style: preserve-3d;
+ /* 设置元素透明（强大）  */
              opacity: .5;
+ /* 设置背面可见 */
              backface-visibility: visible;



### 9.6、缩放



```
			/* 
                对元素进行缩放的函数：
                    scaleX() 水平方向缩放
                    scaleY() 垂直方向缩放
                    scale() 双方向的缩放
            */
            transform:scale(2)
```

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        html{
            perspective:800px;
            
        }
        .box1{
            width: 100px;
            height: 100px;
            background-color: #bfa;
            transition:2s;
            margin: 100px auto;


            /* 变形的原点 默认值 center*/
            /* transform-origin:20px 20px;  */
        }

        .box1:hover{
            /* 
                对元素进行缩放的函数：
                    scaleX() 水平方向缩放
                    scaleY() 垂直方向缩放
                    scale() 双方向的缩放
            */
            transform:scale(2)
        }


        .img-wrapper{
            width: 200px;
            height: 200px;
            border: 1px red solid;
            overflow: hidden;
        }

        img{
            transition: .2s;
        }

        .img-wrapper:hover img{
            transform:scale(1.2);
        }

    </style>
</head>
<body>
    
    <div class="box1"></div>

    <div class="img-wrapper">
        <img src="an.jpg" width="100%">
    </div>


</body>
</html>
```







### 9.10、less

#### css原生变量

```
（--（变量名）：。。）
html{
            /* css原生也支持变量的设置 */
            --color:#ff0;
            --length:200px;
    }
```

#### 计算函数

```
.box1{
            /* calc()计算函数 */
            width: calc(200px*2);
            height: var(--length);
            background-color: var(--color);
     }
```

#### css简介

```
less是一门css的预处理语言
            - less是一个css的增强版，通过less可以编写更少的代码实现更强大的样式
            - 在less中添加了许多的新特性：像对变量的支持、对mixin的支持... ...
            - less的语法大体上和css语法一致，但是less中增添了许多对css的扩展，
                所以浏览器无法直接执行less代码，要执行必须向将less转换为css，然后再由浏览器执行

```

#### 插件（easyless）





#### less文档（zeal文档）

### 9.11、less语法



ctr+s，生成css

> 注意：设置out为true



#### 单行注释，多行注释

```
// less中的单行注释，注释中的内容不会被解析到css中

/*
    css中的注释，内容会被解析到css文件中
*/
```



#### 变量

```
变量定义：
		@变量名
		
		@a:200px;
		@b:#bfa;
		@c:box6;
		
使用：	
		作为
			类名
			一部分值
		使用：@{a}
		（其他情况直接使用）
```



#### 就近，心语

```
变量就近原则

，div{
    width: 300px;
    // 新版的语法
    // height: $width;
}
```



#### 子元素选择

```
.box1{
    .box2{
        color: red;
    }

    >.box3{
        color: red;

    &:hover{
        color: blue;
    }
}
```



#### &符号（父元素）

```
//& 就表示外层的父元素
    &:hover{
        color: orange;
    }

    div &{
        width: 100px;
    }
```



#### extend扩展

```

.p1{
    width: 100px;
    height: 200px;
}

//:extend() 对当前选择器扩展指定选择器的样式（选择器分组）
.p2:extend(.p1){
    color: red;
}
```



#### 样式引用（复制）

```

.p3{
    //直接对指定的样式进行引用，这里就相当于将p1的样式在这里进行了复制
    //mixin 混合
    .p1();
}
```

被引函数

```

// 使用类选择器时可以在选择器后边添加一个括号，这时我们实际上就创建了一个mixins
.p4(){
    width: 100px;
    height: 100px;
}

.p5{
    .p4;（括号可选）
}
```

#### 混合函数

```

//混合函数 在混合函数中可以直接设置变量
.test(@w:100px,@h:200px,@bg-color:red){
    width: @w;
    height: @h;
    border: 1px solid @bg-color;
}
```

参数可覆盖（按顺序）

```

div{
    //调用混合函数，按顺序传递参数
    // .test(200px,300px,#bfa);
    .test(300px);
    // .test(@bg-color:red, @h:100px, @w:300px);
}
```



#### 很多函数（average,darken)

```

span{
    color: average(red,blue);
}

html{
    width: 100%;
    height: 100%; 
}
body {
    width: 100%;
    height: 100%;
    background-color: #bfa;
}

body:hover{
    background-color: darken(#bfa,50%);
}
```



### less补充

#### import

#### 计算

```
//import用来将其他的less引入到当前的less
//可以通过import来将其他的less引入到当前的less中
@import "syntax2.less";

.box1{
    // 在less中所有的数值都可以直接进行运算
    // + - * /
    width: 100px + 100px;
    height: 100px/2;
    background-color: #bfa;
    
}
```



#### 查看 .less 行数

扩展，easyless，settingsjson，复制大括号里面（map：地图，soure：源码）

![image-20210223225950388](image-20210223225950388.png)

设置，扩展，选中settins.json，**括号内+ ，+ 粘贴**。浏览器就显示less的行数了。

![image-20210223230332904](image-20210223230332904.png)



![image-20210223230502564](image-20210223230502564.png)



![image-20210223230912168](image-20210223230912168.png)



## 10、flex

### 10.1、flex

#### 1、初始化樣式

```

*{
            margin: 0;
            padding: 0;
            list-style: none;
 }
```



#### 2、设置弹性盒

```
			/* 将ul设置为弹性容器 */
            display: flex;
```

#### 3、flex-direction（元素排列方向）

```
			/* 
               flex-direction 指定容器中弹性元素的排列方式
                可选值：
                    row 默认值，弹性元素在容器中水平排列（左向右）
                        - 主轴 自左向右
                    row-reverse 弹性元素在容器中反向水平排列（右向左）
                        - 主轴 自右向左
                    column 弹性元素纵向排列（自上向下）
                    column-reverse 弹性元素方向纵向排列（自下向上）

                主轴：
                    弹性元素的排列方向称为主轴
                侧轴：
                    与主轴垂直方向的称为侧轴

            */
```

#### 4、弹性元素属性（伸展，收缩）

```
				/* 
                弹性元素的属性：
                    flex-grow 指定弹性元素的伸展的系数
                       - 父元素剩余空间中，伸展？%
                       
                    flex-shrink 指定弹性元素的收缩系数
                       - 当父元素中的空间不足以容纳所有的子元素时，对子元素进行收缩
                       （收缩0表不收缩，影响其他兄弟元素）
            */
            /* flex-grow: 1; */
```

```
	 <!-- 
        flex(弹性盒、伸缩盒)
            - 是CSS中的又一种布局手段，它主要用来代替浮动来完成页面的布局
            - flex可以使元素具有弹性，让元素可以跟随页面的大小的改变而改变
            - 弹性容器
                - 要使用弹性盒，必须先将一个元素设置为弹性容器
                - 我们通过 display 来设置弹性容器
                    display:flex  设置为块级弹性容器（独占一行）
                    display:inline-flex 设置为行内的弹性容器

            - 弹性元素
                - 弹性容器的子元素是弹性元素（弹性项）
                - 弹性元素可以同时是弹性容器

     -->
```



### 10.2、弹性容器样式

#### 1、弹性元素换行

```
				/* flex-wrap:
                设置弹性元素是否在弹性容器中自动换行
                可选值：
                    nowrap 默认值，元素不会自动换行
                    wrap 元素沿着辅轴方向自动换行
                    wrap-reverse 元素沿着辅轴反方向换行
            */
```

#### 2、元素分配主轴空白

```

            /*  
                justify-content
                    - 如何分配主轴上的空白空间（主轴上的元素如何排列）
                    - 可选值：
                        flex-start 元素沿着主轴起边排列
                        flex-end 元素沿着主轴终边排列
                        center 元素居中排列
                        space-around 空白分布到元素两侧
                        space-between 空白均匀分布到元素间
                        space-evenly 空白分布到元素的单侧

            */
            /* justify-content: center; */
```





#### 3、元素辅轴对齐

```
				/*
             align-items: 
                - 元素在辅轴上如何对齐
                - 元素间的关系
                    - 可选值：
                        stretch 默认值，将元素的长度设置为相同的值
                        flex-start 元素不会拉伸，沿着辅轴起边对齐
                        flex-end 沿着辅轴的终边对齐
                        center 居中对齐
                        baseline 基线对齐
             */

             /* justify-content: center; */
             align-items: flex-start;


             /* align-content: 辅轴空白空间的分布 */
             align-content: space-between;
```

#### 4、元素覆盖（alig-self）

```
		  li:nth-child(1){
            /* align-self: 用来覆盖当前弹性元素上的align-items */
            align-self: stretch;
        }
```



### 10.3、弹性元素样式（增长，缩减，样式）



弹簧

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        *{
            margin: 0;
            padding: 0;
            list-style: none;
        }

        ul{
            width: 900px;
            border: 10px red solid;
            /* 设置弹性盒 */
            display: flex;
        
        }

        li{
            width: 200px;
            height: 100px;
            background-color: #bfa;
            font-size: 50px;
            text-align: center;
            line-height: 100px;

            /* 
                弹性的增长系数（弹簧）
           */
            /* flex-grow: 1; */

            /* 
                弹性元素的缩减系数
                    - 缩减系数的计算方式比较复杂
                    - 缩减多少是根据 缩减系数 和 元素大小来计算
            */
            /* flex-shrink: 1; */

            /* 
                元素基础长度

                flex-basis 指定的是元素在主轴上的基础长度
                    如果主轴是 横向的 则 该值指定的就是元素的宽度
                    如果主轴是 纵向的 则 该值指定的是就是元素的高度
                    - 默认值是 auto，表示参考元素自身的高度或宽度
                    - 如果传递了一个具体的数值，则以该值为准
            */
            /* flex-basis: auto; */

            /* 
                flex 可以设置弹性元素所有的三个样式
                    flex 增长 缩减 基础;
                        initial "flex: 0 1 auto".
                        auto  "flex: 1 1 auto"
                        none "flex: 0 0 auto" 弹性元素没有弹性
            */
            flex: initial;

            
        }
        li:nth-child(1){
            /* order 决定弹性元素的排列顺序 */
            order: 2;
        }

        li:nth-child(2){
            background-color: pink;
            /* flex-grow: 2; */
            order: 3;
        }

        li:nth-child(3){
            background-color: orange;
            /* flex-grow: 3; */
            order: 1;
        }
    </style>
</head>
<body>
    

     <ul>
         <li>1</li>
         <li>2</li>
         <li>3</li>
     </ul>

</body>
</html>
```



### —— pink（参考）——



### 10.4、像素

物理像素不变；

css像素改变；

```
		  像素：
            - 屏幕是由一个一个发光的小点构成，这一个个的小点就是像素
            - 分辨率：1920 x 1080 说的就是屏幕中小点的数量
            - 在前端开发中像素要分成两种情况讨论：CSS像素 和 物理像素
            - 物理像素，上述所说的小点点就属于物理像素
            - CSS像素，编写网页时，我们所用像素都是CSS像素
                - 浏览器在显示网页时，需要将CSS像素转换为物理像素然后再呈现
                - 一个css像素最终由几个物理像素显示，由浏览器决定：
                    默认情况下在pc端，一个css像素 = 一个物理像素

        视口（viewport）
            - 视口就是屏幕中用来显示网页的区域
            - 可以通过查看视口的大小，来观察CSS像素和物理像素的比值
            - 默认情况下：
                视口宽度 1920px（CSS像素）
                        1920px（物理像素）
                        - 此时，css像素和物理像素的比是 1:1

            - 放大两倍的情况：
                视口宽度 960px（CSS像素）
                        1920px（物理像素）
                        - 此时，css像素和物理像素的比是1:2

            - 我们可以通过改变视口的大小，来改变CSS像素和物理像素的比值

```



### 10.5、移动端

```

 <!-- 
        在不通的屏幕，单位像素的大小是不同的，像素越小屏幕会越清晰
            24寸 1920x1080
            i6 4.7寸 750 x 1334

            智能手机的像素点 远远小于 计算机的像素点

            问题：一个宽度为900px的网页在iphone6中要如何显示呢？

            默认情况下，移动端的网页都会将视口设置为980像素（css像素）
                以确保pc端网页可以在移动端正常访问，但是如果网页的宽度超过了980，
                    移动端的浏览器会自动对网页缩放以完整显示网页

            https://material.io/resources/devices/


            所以基本大部分的pc端网站都可以在移动端中正常浏览，但是往往都不会有一个好的体验，
                为了解决这个问题，大部分网站都会专门为移动端设计网页


-->
```



### 10.6、移动端页面（结论）

**完美视口保证手机呈现不会太小**

```

<!-- 
        移动端默认的视口大小是980px(css像素)，
            默认情况下，移动端的像素比就是  980/移动端宽度  （980/750）
            如果我们直接在网页中编写移动端代码，这样在980的视口下，像素比是非常不好，
                导致网页中的内容非常非常的小
            编写移动页面时，必须要确保有一个比较合理的像素比：
                1css像素 对应 2个物理像素
                1css像素 对应 3个物理像素

            - 可以通过meta标签来设置视口大小

            - 每一款移动设备设计时，都会有一个最佳的像素比，
                一般我们只需要将像素比设置为该值即可得到一个最佳效果
                将像素比设置为最佳像素比的视口大小我们称其为完美视口

                将网页的视口设置为完美视口
                <meta name="viewport" content="width=device-width, initial-scale=1.0">

                结论：以后再写移动端的页面，就把上边这个玩意先写上

     -->
     
```

DEVICE　ＭETRICS（网址）：查看手机完美视口

### 10.7、视口

**像素导致各手机缝隙、溢出**

```
<!-- 
        不同的设备完美视口的大小是不一样的
            iphone6 -- 375
            iphone6plus -- 414

        由于不同设备视口和像素比不同，所以同样的375个像素在不同的设备下意义是不一样，
            比如在iphone6中 375就是全屏，而到了plus中375就会缺一块

        所以在移动端开发时，就不能再使用px来进行布局了

        vw 表示的是视口的宽度（viewport width）
            - 100vw = 一个视口的宽度
            - 1vw = 1%视口宽度

            vw这个单位永远相当于视口宽度进行计算

            设计图的宽度
                750px 1125px

            设计图 
                750px  

            使用vw作为单位
                100vw

            创建一个 48px x 35px 大小的元素

            100vw = 750px(设计图的像素) 0.1333333333333333vw = 1px
            6.4vw = 48px(设计图像素)
            4.667vw = 35px

    -->
```



### 10.8、vw适配



```html

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
                网页中字体大小最小是12px（扩大40倍）
               	
             	      html{
                        /* 
									750px ~100vm,
                             1px = 0.1333333vw ,

                            40px = 5.3333vw 。
                        */
                        font-size: 5.3333vw;(1px * 40)
        					}
          
            			

                     1 rem = 1 html的字体大小

						.box1{
                        /*
									width:原rem/40;
									height:原rem/40;

								*/
                        width: 18.75rem;
                        height: 0.875rem;
                        background-color: #bfa;
                    }
         
 
```



computered:查看计算后样式

有less。好计算。



### 10.9、响应式布局

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        /*
         使用媒体查询 
            语法： @media 查询规则{}
                媒体类型：
                    all 所有设备
                    print 打印设备
                    screen 带屏幕的设备
                    speech 屏幕阅读器
                    - 可以使用,连接多个媒体类型，这样它们之间就是一个或的关系

                可以在媒体类型前添加一个only，表示只有。
                    only的使用主要是为了兼容一些老版本浏览器
         */

        /* @media print,screen{
            body{
                background-color: #bfa;
            }
        } */

        @media only screen {
            body{
                background-color: #bfa;
            }
        }
    </style>
</head>
<body>
    <!-- 
        响应式布局
            - 网页可以根据不通的设备或窗口大小呈现出不同的效果
            - 使用响应式布局，可以使一个网页适用于所有设备
            - 响应布局的关键就是 媒体查询
            - 通过媒体查询，可以为不通的设备，或设备不同状态来分别设置样式
     -->
    
</body>
</html>
```





### 10.10、媒体查询

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        /*
             媒体特性：
                width 视口的宽度
                height 视口的高度

                min-width 视口的最小宽度（视口大于指定宽度时生效）
                max-width 视口的最大宽度（视口小于指定宽度时生效）
         */

         /* @media (max-width: 500px){
             body{
                background-color: #bfa;
             }
         } */

/* 
         样式切换的分界点，我们称其为断点，也就是网页的样式会在这个点时发生变化
         一般比较常用的断点

         小于768 超小屏幕 max-width=768px
         大于768 小屏幕   min-width=768px
         大于992 中型屏幕 min-width=992px
         大于1200 大屏幕  min-width=1200px

*/
         @media only screen and (min-width: 500px) and (max-width:700px){
             body{
                background-color: #bfa;
             }
         }
    </style>
</head>
<body>
    
</body>
</html>
```





### 练习

#### 1、w3c导航条（重做）

![04_w3school的导航条](D:\A_YuHaiWei\A_Html_5\基础资料\code\exercise\练习的截图\04_w3school的导航条.png)



```html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        *{
            margin: 0;
            padding: 0;
            list-style: none;
        }
        ul{
            width: 1210px;
            height: 48px;
            line-height: 48px;
            display: flex;
            margin: 20px auto;
            padding: 0 aut0;
            background-color: #e8e7e3;

        }
        li{
           /*指定宽高，伸展收缩，刚好填满容器*/
            flex-grow:1;
            flex-shrink: 1;
            float: left;
            line-height: 48px;
            margin: 0 20px;

        }
    </style>
</head>
<body>
    <ul>
        <li>HTML/CSS</li>
        <li>Brower Side</li>
        <li>Server Side</li>
        <li>Programming</li>
        <li>XML</li>
        <li>Web Building</li>
        <li>Reference</li>
    </ul>
</body>
</html>
```

#### 总结

/*指定宽高，伸展收缩，刚好填满容器*/
            flex-grow:1;
            flex-shrink: 1;

#### 2、淘宝导航



```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        * {
            margin: 0;
            padding: 0;

        }
        .inner{
            display:flex;
            width: 100%;
            /* flex-direction: column; */
            justify-content: space-around;
        }
        .item{
            flex: initial;
            /* background-color: #bfa; */
            width: 18%;
            text-align: center;
        }
        img{
            width: 100%;
        }
        a{
            text-decoration: none;
            color: #000;
            font-size: 14px;
        }
        /* .item{
            float: left;
        } */
    </style>
</head>

<body>
    <nav class="outer">
        <div class="inner">
            <div class="item">
                <a href="#"><img src="img/16/1.png" alt="">天猫</a>
            </div>
            <div class="item">
                <a href="#"><img src="img/16/2.png" alt="">聚划算</a>
            </div>
            <div class="item">
                <a href="#"><img src="img/16/3.png" alt="">天猫国际</a>
            </div>
            <div class="item">
                <a href="#"><img src="img/16/4.png" alt="">外卖</a>
            </div>
            <div class="item">
                <a href="#"><img src="img/16/5.png" alt="">天猫超市</a>
            </div>
        </div>
        <div class="inner">
            <div class="item">
                <a href="#"><img src="img/16/6.png" alt="">天猫中心</a>
            </div>
            <div class="item">
                <a href="#"><img src="img/16/7.png" alt="">飞猪旅行</a>
            </div>
            <div class="item">
                <a href="#"><img src="img/16/8.png" alt="">领金币</a>
            </div>
            <div class="item">
                <a href="#"><img src="img/16/9.png" alt="">拍卖</a>
            </div>
            <div class="item">
                <a href="#"><img src="img/16/10.png" alt="">分类</a>
            </div>
        </div>
    </nav>
</body>

</html>
```

#### 总结

宽度设置百分比，伸缩比例不变。





#### 3、移动端页面



```html

@total-width:750;

.w{
    width: 693/40rem;
    margin: 0 auto;
}

//设置根元素
html{
    // 设置rem的比值
    font-size: 100vw/@total-width * 40;
    background-color: #eff0f4;
}

a{
    text-decoration: none;
}

//设置头部header
.top-bar:extend(.w){
    //设置弹性容器
    display: flex;
    // 设置高度
    height: 175/40rem;
    line-height: 175/40rem;
```

>   照着设计稿750px做就行了





#### 总结



##### 重置样式

在手机端意义不大











## HTML5（新增）

参考付铭。

### 概述

HTML5 是下一代 HTML 标准，2014年10月由万维网联盟（W3C）完成标准制定。

#### 1 HTML5 的由来

HTML5草案的前身名为 Web Applications 1.0，于2004年被WHATWG提出，于2007年被W3C接纳，并成立了新的 HTML 工作团队。
HTML 5 的第一份正式草案已于2008年1月22日公布。HTML5 仍处于完善之中。然而，大部分现代浏览器已经具备了某些 HTML5 支持。
2012年12月17日，万维网联盟（W3C）正式宣布凝结了大量网络工作者心血的HTML5规范已经正式定稿。根据W3C的发言稿称：“HTML5是开放的Web网络平台的奠基石。”
2013年5月6日， HTML 5.1正式草案公布。该规范定义了第五次重大版本，第一次要修订万维网的核心语言：超文本标记语言（HTML）。在这个版本中，新功能不断推出，以帮助Web应用程序的作者，努力提高新元素互操作性。
2014年10月29日，万维网联盟宣布，经过接近8年的艰苦努力，该标准规范终于制定完成。

#### 2 HTML5 优势

提高可用性和改进用户的友好体验；
有几个新的标签，这将有助于开发人员定义重要的内容；
可以给站点带来更多的多媒体元素(视频和音频)；
可以很好的替代FLASH和Silverlight；
当涉及到网站的抓取和索引的时候，对于SEO很友好；
将被大量应用于移动应用程序和游戏；
可移植性好。

#### 3 两套标准

W3C 更新到了 HTML5.2 ： https://www.w3.org/TR/html/index.html

WHATWG 称之为 HTML 现行标准 （HTML Standard） https://whatwg-cn.github.io/html/multipage/

2019年5月28日，W3C 与 WHATWG 就共同开发 HTML 与 DOM 规范达成协议

传送门：http://www.chinaw3c.org/archives/2353/

#### 4 兼容性

chrome、Safari、opera、Firefox以及各种以wekkit（chromium）为内核的国产浏览器。
Internet Explorer 9 以及 以上版本





### 语义化标签



#### 语义化结构标签

| 标签名  | 语义和功能                         | 属性 | 单标签还是双标签 |
| ------- | ---------------------------------- | ---- | ---------------- |
| header  | 表示页面或section中的页眉          |      | 双               |
| footer  | 表示页面或section中的页脚          |      | 双               |
| article | 表示文章、博客、新闻、帖子、评论等 |      | 双               |
| aside   | 表示侧边栏                         |      | 双               |
| nav     | 表示导航                           |      | 双               |
| section | 表示页面中的一节或文章中的一段     |      | 双               |

> **总结：** HTML5新增的这些结构标签就是具有语义的 div。



#### 状态标签

##### meter 标签

| 标签名   | 语义和功能                               | 属性                          | 单标签还是双标签 |
| -------- | ---------------------------------------- | ----------------------------- | ---------------- |
| meter    | 表示静态的度量，如用量、磁盘容量、温度等 | max、min、value、high、low 等 | 双               |
| progress | 表示进度，如完成多少、进行多少等         | max、value                    | 双               |

> **meter 和 progress 什么区别？**
>
> meter 表示静态的度量，如用量、磁盘容量、温度等； progress 表示进度，如完成多少、进行多少等



以下自己

```
meter
英 [ˈmiːtə(r)]   美 [ˈmiːtər]  
n.
(用于测量电、煤气、水等，以及时间和距离的)计量器，计量表;计;仪;表
v.
用仪表计量
```

**语义：**

标签定义已知范围或分数值内的标量测量。也被称为 gauge（尺度）。双标签。 例子：电量、磁盘用量等。

>   注释：`<meter>` 标签不应用于指示进度（在进度条中）。如果标记进度条，请使用 `<progress>` 标签。



**标签属性：**

| 属性    | 值     | 描述                       |
| :------ | :----- | :------------------------- |
| high    | number | 规定被界定为高的值的范围。 |
| low     | number | 规定被界定为低的值的范围。 |
| max     | mber   | 规定范围的最大值。         |
| min     | number | 规定范围的最小值。         |
| optimum | number | 规定度量的最优值。         |
| value   | number | 规定度量的当前值。         |



**设置 meter 样式：**

```css
meter {
    /* 可以设置宽高 */
}
meter::-webkit-meter-bar {
    /* 可以设置总体边框，空白区域背景等 */
}
meter::-webkit-meter-optimum-value {
    /* 设置最优值范围内的样式 */
}
meter::-webkit-meter-suboptimum-value {
    /*凑合 范围内的样式*/
}
meter::-webkit-meter-even-less-good-value {
    /*糟糕 范围内的样式*/
}
```

```html
<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        meter{
            width: 1000px;
            height: 300px;
        }
    </style>
</head>
<body>
    <meter value="0.5" high="0.9" low="0.1" optimum="0.5"></meter>  
</body>
</html>
```



![image-20210308145702548](前端基础.assets/image-20210308145702548.png)







##### progress 标签

**语义：**

显示某个任务完成的进度的指示器，一般用于表示进度条。双标签。

**标签属性：**

| 属性  | 值     | 描述               |
| :---- | :----- | :----------------- |
| max   | number | 规定需要完成的值。 |
| value | number | 规定进程的当前值。 |

**设置 progress 样式：**

```css
progress {
    /* 所有 设置宽高、边框 */
    /*IE、firefox 设置空白区域背景色*/
      /* color 可以设置 IE下进度条区域的背景色*/

    /*只有设置了 border 或者 background 属性， chrome才可以设置空白区域颜色*/
}
::-webkit-progress-bar {
    /*chrome 空白区域颜色*/
}
::-webkit-progress-value {
    /*设置进度条区域*/
}
::-moz-progress-bar {
    /*设置进度条区域*/
}
```



#### 列表标签

| 标签名   | 语义和功能                            | 属性 | 单标签还是双标签 |
| -------- | ------------------------------------- | ---- | ---------------- |
| datalist | 定义输入框的输入提示列表              |      | 双               |
| details  | 定义对某个问题的详细说明              |      | 双               |
| summary  | 嵌套在 details 里面，表示要解释的问题 |      | 双               |

① datalist 的用法

![image-20210310114924824](前端基础.assets/image-20210310114924824.png)



![image-20210310114941617](前端基础.assets/image-20210310114941617.png)







以下自己

##### **datalist标签**

datalist 会包含一组 option 元素，这些元素表示其表单控件的可选值。 datalist 的 id 必须要和 input 中的 list 一致。



##### **details 标签**

标签用于描述文档或文档某个部分的细节。

与 <summary> 标签 配合使用可以为 details 定义标题。标题是可见的，用户点击标题时，会显示出 details。

属性 open 定义 details 是否可见。



#### 注释标签

![image-20210310115014552](前端基础.assets/image-20210310115014552.png)





#### 标记标签

`<mark></mark>` 定义带有记号的文本 请在需要突出显示文本时使用,如搜索引擎搜索页面

![image-20210310115031372](前端基础.assets/image-20210310115031372.png)

#### 图像标签

<figure></figure> 一段独立的流内容，比如文章中的插图。

<figcaption></figcaption> 标签定义 figure 元素的标题。





#### 表单功能

#### 表单控件新增属性

-   **placeholder** 	     提示文字，有别于 value 值
-   **required**                表示该字段必填
-   **autofocus**              自动获取焦点
-   **autocomplete **     自动完成，可以设置为 on/off`(提示)`
-   **pattern**                  正则填写验证规则





##### placeholder

输入提示

![image-20210308170224598](前端基础.assets/image-20210308170224598.png)



##### required

![image-20210308170258652](前端基础.assets/image-20210308170258652.png)







##### autocomplete    

浏览器`记录`。默认开启



##### autofocus      

![image-20210308170712316](前端基础.assets/image-20210308170712316.png)



##### pattern



![image-20210310140959334](前端基础.assets/image-20210310140959334.png)



![image-20210310141150859](前端基础.assets/image-20210310141150859.png)



![image-20210310141200455](前端基础.assets/image-20210310141200455.png)

#### input新增type

##### 文本类

##### email



![image-20210310141904605](前端基础.assets/image-20210310141904605.png)





##### url

输入网址



##### number

![image-20210310142116801](前端基础.assets/image-20210310142116801.png)



![image-20210310142338474](前端基础.assets/image-20210310142338474.png)



![image-20210310142304567](前端基础.assets/image-20210310142304567.png)









![image-20210310142424099](前端基础.assets/image-20210310142424099.png)

![image-20210310142415110](前端基础.assets/image-20210310142415110.png)

##### search

语义不同text



##### tel

![image-20210310142757138](前端基础.assets/image-20210310142757138.png)





##### 范围选择框

##### range

可以滑动

![image-20210310143306612](前端基础.assets/image-20210310143306612.png)

![image-20210310143331991](前端基础.assets/image-20210310143331991.png)











##### 颜色选择框

##### color

![image-20210310143704937](前端基础.assets/image-20210310143704937.png)



![image-20210310143625450](前端基础.assets/image-20210310143625450.png)



##### 时间日期选择类



##### date

（五个）

![image-20210310144547750](前端基础.assets/image-20210310144547750.png)



![image-20210310144030508](前端基础.assets/image-20210310144030508.png)



![image-20210310143918207](前端基础.assets/image-20210310143918207.png)



![image-20210310143929689](前端基础.assets/image-20210310143929689.png)



![image-20210310144104200](前端基础.assets/image-20210310144104200.png)

![image-20210310144203404](前端基础.assets/image-20210310144203404.png)

![image-20210310144216232](前端基础.assets/image-20210310144216232.png)







![image-20210310144320102](前端基础.assets/image-20210310144320102.png)



![image-20210310144310060](前端基础.assets/image-20210310144310060.png)



![image-20210310144430297](前端基础.assets/image-20210310144430297.png)





#### form新增属性

##### novalidate

![image-20210310144837538](前端基础.assets/image-20210310144837538.png)

![image-20210310144931862](前端基础.assets/image-20210310144931862.png)





#### 音视频

##### audio、video

| 标签名 | 功能和语义                                   | 属性                                                         | 单标签还是双标签 |
| ------ | -------------------------------------------- | ------------------------------------------------------------ | ---------------- |
| video  | 视频                                         | **src：** 指定视频文件地址。<br>**controls：** 显示控制条，无需给值<br>**muted：** 设置静音，无需给值<br>**autoplay：** 设置自动播放，无需给值。<br>**loop：** 设置循环播放，无需给值。<br>**preload：** 设置视频预先加载，无需给值。<br>**poster：** 设置视频封面，指定一个图片的地址。<br>**width：** 设置视频宽。<br>**height：** 设置视频高。 | 双标签           |
| audio  | 音频                                         | **src：** 指定音频频文件地址。<br/>**controls：** 显示控制条，无需给值<br/>**muted：** 设置静音，无需给值<br/>**autoplay：** 设置自动播放，无需给值。<br/>**loop：** 设置循环播放，无需给值。<br/>**preload：** 设置视频预先加载，无需给值。 | 双标签           |
| source | 加载音频或视频<br>嵌套在audio或者video的里面 | **src：** 指定音频或视频文件的地址<br>**type：** 指定视频或视频的类型 | 单标签           |

> **注意：**
>
> 1. 视频或音频能够自动播放的前提是，设置静音；这是浏览器做出的规定。
> 2. 默认情况下，点击播放按钮的时候，才会下载视频或音频文件，如果设置了 preload 属性，页面一打开就开始下载视频或音频文件。



##### 浏览器兼容

① 视频格式

```
mp4	所有浏览器都支持，推荐
webm
ogg
```

② 音频格式

```
mp3	所有的浏览器都支持，推荐
wav
ogg
```



##### 视频背景

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        * {
            margin: 0;
            padding: 0;
        }
        html,body {
            width: 100%;
            height: 100%;
        }
        .bg {
            width: 100%;
            height: 100%;
            /* 让视频自动适应大小 */
            object-fit: cover;
        }

        h1 {
            position: absolute;
            left: 0;
            right: 0;
            top: 40%;
            font-size: 80px;
            text-align: center;
            color: #fff;
            text-shadow: 0 0 15px #333;
        }

    </style>
</head>
<body>
    
    <video src="sources/bg/coverr-boat-near-coast-1567677579626.mp4" class="bg" muted autoplay loop></video>
    <h1>小乐的幸福生活</h1>
</body>
</html>
```

>               /* 让视频自动适应大小 */
>               object-fit: cover;



#### 全局属性

**contenteditable 属性：** 设置元素中文本内容可以编辑；值：yes 或者 no。

**hidden 属性：** 隐藏元素，无需给值。



#### 兼容方案

参考铭哥官网





# CSS3

## 概述

### 1 什么是CSS3

-   CSS3是CSS2的升级版本，3只是版本号，它在CSS2.1的基础上增加了很多强大的新能
-   CSS3语言开发是朝着模块化发展的 https://www.w3.org/Style/CSS/current-work.html

### 2. CSS的新特性

-   强大的CSS3选择器
-   抛弃图片的视觉效果 圆角 阴影 渐变 半透明 图片边框, 可以通过CSS3实现,而不用借助于JavaScript或图片
-   新增的背景功能
-   盒子模型的变化
-   阴影效果
-   多列布局与弹性盒模型布局
-   Web字体与WebFont图标
-   颜色与透明度
-   圆角与边框
-   CSS变形
-   CSS过渡与动画交互
-   媒体特性与Response布局



### 3. 浏览器对CSS3的支持情况

![img](CSS3/浏览器支持.png)





**注意：** 可以通过网站 https://caniuse.com/ 来查看浏览器对某个CSS模块的支持情况。

### 4. CSS3属性的私有前缀

在CSS3模块标准尚未被W3C批准或者标准所提议的特性尚未被浏览器完全实现时，浏览器厂商会使用所谓的私有前缀来测试“试验性的”CSS 特性。各大浏览器的私有前缀如下：

-   IE 浏览器 `-ms-`
-   firefox 浏览器 `-moz-`
-   chrome 浏览器 `-webkit-`
-   Safari 浏览器 `-webkit-`
-   opera 浏览器 `-o-`



## 基本语法



### 浏览器私有前缀

```
Chorme:  -webkit-
Safari:  -webkit-
IE;		 -ms-
Firefox: -moz-
Opera:   -o-
```



### 长度单位

**rem：** 根元素字体大小的倍数。注意与 em 的区别。

**vw：** 把视口宽度分为100份，指定占其中的多少份。注意与百分比的区别。(感觉很好用 , 视口变长时`包含滚动条`)

**vh：** 把视口高度分为100份，指定占其中的多少份。

**vmax：** 把视口宽和高中大的分为100份，指定占其中多少份。

**vmin：** 把视口宽和高中小的分为100份，指定占其中多少份



### 颜色设置



**rgba()：** 在rgba的基础上多了不透明度（opacity），取值范围 0 ~ 1 之间的小数（0：完全透明，1：完全不透明）。

**hsl()：** h:色相（0~360）；s：饱和度（0%~100%）；l：亮度（0%~100%）。

**hsla()** ：在 hsl 的基础上多了不透明度。



## 选择器



### 基本~（6）

**标签名选择器：**

```css
标签名 {
    
}
```

**类名选择器：**

```css
.类名 {
    
}
```

**ID选择器：**

```css
#ID名 {
    
}
```

**全局选择器：**

```css
* {
    
}
```

**并集选择器（多选择器）**

```css
选择器1,选择器2,选择器3 {
    
}
```

**交集选择器：**

```css
p.item {
    
}
.item.current {
    
}
```



### 后子兄弟~（4）



**后代元素选择器：**

```css
选择器1 选择器2 {
}
```

**子元素选择器：**

```css
选择器1>选择器2 {    }选择器1 > 选择器2 {    }
```

**选择后面相邻的一个兄弟元素：**

```
选择器1+选择器2 {	}
```

**选择后面所有的兄弟元素：**

```css
选择器1~选择器2 {    }
```

```css
/* .nav 下除了第一 a，其他都被选择到了 */.nav a+a {    border-left: 1px solid #ccc;} 
```

![image-20210312103739314](CSS3/image-20210312103739314.png)





### 属性~（5）

`[attrName]`  选择拥有attrName 属性元素。

`[attrName="value"]`   attrName 属性，值是 value 元素。

`[attrName^="value"]`   attrName 属性,值以 value 开头元素。

`[attrName$="value"]`  attrName 属性，值以 value 结尾元素。

`[attrName*="value"]`  attrName 属性,值中包含 value 元素。

![image-20210312110647356](CSS3/image-20210312110647356.png)

组合

![image-20210313091211434](CSS3/image-20210313091211434.png)

### 伪类~

####  动态伪类~（5个）

```
:link		选择地址没有被访问过的超链接元素:visited	选择地址被访问过的超链接元素:hover		选择鼠标悬停在上面的元素。:active		选择鼠标在上面并且按键按下不松手的元素:focus		选择获取焦点的元素。
```



####  锚点伪类~（1个）

```
:target		选择当前锚点指向的元素。
```



####  语言伪类~ (1个，了解)

```
lang()		根据语言选择元素（lang 属性的值）
```

####  表单伪类~（3个）

UI元素伪类~

```
:enabled	选择可以使用的表单控件（没有设置disabled 属性）:disabled	选择不可以使用的表单控件（设置了disabled属性）:checked	选择到被选中的单选按钮、复选框、下拉选项（option）
```





#### 结构伪类~

```
:root	选择到根元素:empty	选择到既不能有文本内容也没有后代元素的元素:first-child			所有兄弟元素中的第一个:last-child				所有兄弟元素中的最后一个:nth-child(n)			所有兄弟元素中的第n个，n是个数字:nth-last-child(n)		所有兄弟元素中的倒数第n个，n是个数字:only-child				没有兄弟元素的元素:first-of-type			所有兄弟元素中同类型的第一个:last-of-type			所有兄弟元素中同类型的最后一个:nth-of-type(n)			所有兄弟元素中同类型的第n个,n是个数字:nth-last-of-type(n)	所有兄弟元素中同类型的倒数第n个，n是数字:only-of-type			没有同类型兄弟元素
```

相当交集选择器

![image-20210312141732662](CSS3/image-20210312141732662.png)



![image-20210312142902540](CSS3/image-20210312142902540.png)



#### 否定伪类~（1个）

```
:not(选择器)			  排除满足小括号中选择器的元素
```



### 伪元素~（6）



```
::first-letter		选择元素中第一字母::first-line		选择元素中第一行::after				给元素动态创建最后一个子元素::before			给元素动态创建第一个子元素::placeholder		用于设置输入框或文本域中placeholder属性设置的文字的样式::selection			用于设置被鼠标选中的文字的样式::marker
```

![image-20210312151437455](CSS3/image-20210312151437455.png)

![image-20210312151454448](CSS3/image-20210312151454448.png)

### ~优先级

```
ID选择器 > 类名选择器、伪类选择器、属性选择器  > 标签名选择器、伪元素选择器  > 全局选择器
```



## 盒子模型相关

### box-sizing

通过设置该属性，决定 width 和 height 设置的是内容的大小还是盒子的总大小。

值：

content-box，默认值，width 和 height 设置的是内容的大小。

border-box, width 和 height 设置的是盒子的总大小。



###  box-shadow

```css
box-shadow: 3px 2px;  /*设置阴影的偏移位置， 颜色默认黑色*/box-shaodw: 3px 3px 5px;  /*设置阴影的偏移位置和模糊值*/box-shaodw: 3px 3px 5px #f90;  /*设置阴影的偏移位置和模糊值以及颜色*/box-ahdow: 3px 3px 10px 2px #f90;  /*2px表示外延*/box-ahdow: 3px 3px 10px inset;  /* inset 表示设置内阴影*/box-ahdow: 3px 3px 10px 2px #f90 inset;
```

>   box-shadow:（水偏）（垂偏）（模糊半径，可省）【三属性必连，其余inset、color随易】



```css
/*给元素同时设置 多个阴影*/box-shadow: 3px 0 2px cyan,             0 5px 2px pink,            -5px 0 2px green,            0 -5px 2px purple;
```

![image-20210312155052509](CSS3/image-20210312155052509.png)

### opacity

设置元素整体的不透名度，取值范围是 0 ~ 1 之间的小数，数值越大越不透明，0表示完全透明，1表示完全不透明。

### resize 

否允许用户缩放，调节元素尺寸大小

```
值：none： 不允许用户调整元素大小。 (默认)both： 用户可以调节元素的宽度和高度。 horizontal： 用户可以调节元素的宽度     vertical： 用户可以调节元素的高度。
```

>   另添overflow：hidden





## 背景

### 属性

#### bg-origin

 设置背景图调整位置所在坐标系的原点

```
值：padding-box : 默认值，背景图位置原点在padding区域content-box : 背景图位置原点在内容区域。border-box : 背景图位置原点在边框上
```

#### bg-clip

裁剪背景图，设置什么范围内的背景图可见

```
值：border-box :  默认值，边框以及边框以内背景图可见。padding-box : 内边距以及内边距以内背景图可见。content-box : 仅仅内容区域上的背景图可见。text : 只有文字上的背景图可见。需要设置私有前缀。
```

```css
-webkit-background-clip: text;
```

![image-20210312164554485](CSS3/image-20210312164554485.png)

![image-20210312164414539](CSS3/image-20210312164414539.png)

#### bg-size

调整背景图图片的大小

```
值：第一种方式： 指定两个长度，第一个是背景图宽度，第二个背景图高度；如果写写了一个长度，被当做宽度，背景图高度根据比例自动算。第二种方式： 使用关键字：           contain	优先保证背景图全部显示在元素上，可能会造成元素有空白           cover    优先保证元素上都会显示背景图，可能会有小部分背景图不可见。推荐使用
```



#### 复合

```css
 background: url(../images/bg05.jpg) no-repeat center/300px 300px;
```

>   **复合属性的相关规则：**
>
>   1. background-size 复合到 background 中，需要写在 background-position 值的后面，用 `/` 隔开。(后覆盖)
>   2. background-origin 和 background-clip 值是一样的关键字，设置一个被当做background-origin,设置两个(前面是origin，后面是clip)

![image-20210312170237486](CSS3/image-20210312170237486.png)

### 多背景

CSS3允许一个元素设置多个背景图片。

```css
background: url(../images/bg03.jpg) no-repeat,             url(../images/bg04.jpg) no-repeat right top/200px 200px,            url(../images/bg05.jpg) no-repeat left center/300px 200px;
```





## 边框

### 圆角

| CSS 属性名             | 含义       | 值                                                       |
| ---------------------- | ---------- | -------------------------------------------------------- |
| border-top-left-radius | 左上角圆角 | 设置长度，一个值表示正圆的半径；二个值分别是x半径和y半径 |
| border-top-right       | 右上角圆角 | 设置长度，一个值表示正圆的半径；二个值分别是x半径和y半径 |
| border-bottom-left     | 左下角圆角 | 设置长度，一个值表示正圆的半径；二个值分别是x半径和y半径 |
| border-bottom-right    | 右下角圆角 | 设置长度，一个值表示正圆的半径；二个值分别是x半径和y半径 |
| border-radius          | 复合       | 长度，同时设置多个角                                     |
|                        |            | 一值：正圆<br>二值：x半径，y半径                         |

> **border-raiuds 属性值的设置规则：**
>
> 
>
> 左上起头，顺时针
>
> 
>
> **设置正圆圆角：**
>
> ​		1 个值： 表示 4 个角的半径。
>
> ​		2 个值： 第一个值表示左上和右下的半径，第二个值表示右上和左下的半径。
>
> ​	    3 个值： 第一个值表示左上角的半径，第二个值表示右上和左下的半径，第三个值表示右下的半径。
>
> ​        4 个值： 分别表示 左上、右上、右下、左下 的半径。
>
> **设置椭圆圆角（x半径与y半径不一致）**
>
> ​	     使用 `/` 分别设置 x 半径和y半径，每一组都可以写 1 ~ 4 个值
>
> ```css
> border-radius:20px / 40px; border-radius:20px 40px 50px 60px / 40px 30px 20px 10px; border-radius:100px / 40px 30px 20px 10px; 
> ```
>
> ```
> 
> ```



### 轮廓

| CSS 属性名     | 含义                             | 值                                     |
| -------------- | -------------------------------- | -------------------------------------- |
| outline-width  | 设置外轮廓宽度                   | 长度                                   |
| outline-color  | 设置外轮廓颜色                   | 颜色                                   |
| outline-style  | 设置外轮廓风格                   | none、solid、dashed、double、dotted 等 |
| outline        | 复合属性                         | 三个子属性的值                         |
| outline-offset | 设置外轮廓与边框的距离，默认是 0 | 长度                                   |

> **注意：** outline-offset 不是 outline 的子属性！
>
> border类似



## 文本

### 各属性

| CSS 属性名            | 含义                           | 值                                                           |
| --------------------- | ------------------------------ | ------------------------------------------------------------ |
| text-decoration-line  | 设置哪一种修饰线               | none: 默认值，无修饰线<br>underline: 下划线<br>overline: 上划线<br>line-through：删除线 |
| text-decoraiton-color | 设置修饰线颜色                 | 颜色                                                         |
| text-decoration-style | 设置修饰线风格                 | solid：默认，实线<br>dashed：虚线<br>dotted：点线<br>double：双实线<br>wavy：波浪线 |
| text-decoration       | 复合属性                       | 三个子属性的值                                               |
| text-align-last       | 设置最后一行文本的水平对齐方式 | start：默认值，开始方向对齐<br>end：结束方向对齐<br>left：左对齐<br>right：右对齐<br>center：中间对齐<br>justify：两端对齐 |
| white-space           | 设置文本的换行方式             | normal：默认值，默认的样式<br>pre：原格式显示<br>pre-wrap: 在pre的基础上增加了自动换行<br>pre-line: 在pre的基础上增加了自动换行但是会忽略多个空格。<br>nowrap：强制文本在一行显示 |
| text-overflow         | 设置文本的溢出方式             | clip：默认，溢出的文本裁掉<br>ellipsis：文字过多，后面显示省略号。 |
| text-shadow           | 设置文本阴影                   | 设置 2 ~ 4 个值，包括颜色、偏移位置、模糊值                  |

> **注意：**
>
> 1. CSS3之后， text-align 属性的默认值不是 left 了，而是 start 。
> 2. text-overflow 属性生效的前提是： ① 设置 `overflow:hidden` ② 需要设置 `white-space: nowrap`。



### 立体字

立体字

![image-20210313140446474](CSS3/image-20210313140446474.png)

### 镂空文字

实现方法（）之一

**文本描边**

```
文字描边功能仅 webkit 内核浏览器支持-webkit-text-fill-color 定义文字填充色覆盖 color 定义。-webkit-text-stroke-width 设置文字描边的宽度，取长度单位。-webkit-text-stroke-color 设置文字描边的颜色，取颜色单位。-webkit-text-stroke 复合属性，设置文字描边宽度和颜色。
```

镂空文字

案例

![image-20210313141532334](CSS3/image-20210313141532334.png)



## 渐变

### 线性~

```
linear-gradent(渐变方向， 颜色 位置，颜色 位置，颜色 位置...)
```

```
渐变方向：   使用关键字： to left、to top、to bottom、to right、to left bottom、to right bottom ...   使用角度： 0deg ~ 360deg（顺时针变化）， 0deg表示从下到上，90deg表示从左到右   颜色位置：	使用长度指定颜色位置。
```

```css
 background-image: linear-gradient(90deg, #fff 220px, #000 221px) background-image: linear-gradient(90deg, red, orange, yellow, green,cyan, blue, purple)
```

![image-20210313142517349](CSS3/image-20210313142517349.png)

### 径向~

```
radial-gradient(形状 半径大小 at 圆心位置，颜色1 颜色1的位置，颜色2 颜色2的位置，颜色3 颜色3的位置...)
```

```
形状：	circle 或者 ellipse半径大小： 指定长度，默认一直延伸到元素的边界圆心位置： 指定坐标，默认值元素中心。
```

```css
background-image: radial-gradient(red, blue);background-image: radial-gradient(circle at 40% 40%, red, blue);background-image: radial-gradient(circle at 40% 40%, red, blue);
```

### 重复~

```css
repeating-linear-gradient()		重复线性渐变repeating-radial-gradent()		重复径向渐变
```

## WEB字体

### 基本语法

```css
/* 引入Web字体 给web字体取名字*/@font-face {    font-family: "fangfang";    src: url("sources/fonts/FZSJ-WSMQSJW.woff2") format("woff2"),         url("sources/fonts/FZSJ-WSMQSJW.woff") format("woff"),         url("sources/fonts/FZSJ-WSMQSJW.ttf") format("truetype"),         url("sources/fonts/FZSJ-WSMQSJW.eot") format("embedded-opentype"),         url("sources/fonts/FZSJ-WSMQSJW.svg") format("svg");    font-weight: normal;    font-style: normal;}/*使用web字体*/.aritcle {    font-family: "fangfang";}
```

**字体格式的转换工具：**

- https://www.fontsquirrel.com/tools/webfont-generator FontSquirrel在线工具
- https://www.fontke.com/tool/fontface/ 字客网



### 定制字体

**字体定制工具：**

- https://www.iconfont.cn/webfont?spm=a313x.7781068.0.d81ec59f2#!/webfont/index 阿里Web字体
- http://www.youziku.com/ 字体库网站
- https://www.ziti163.com/webfont/create.aspx 字体网



### 字体图标



Unicode方式

![image-20210313163502644](CSS3/image-20210313163502644.png)



## transform 变换



### 变换相关CSS 属性

| CSS 属性名          | 含义                                                         | 值                                                       |
| ------------------- | ------------------------------------------------------------ | -------------------------------------------------------- |
| transform           | 设置进行哪一种变换<br>可以设置多种变换形式，变换方法之间空格隔开. | 设置变换方法                                             |
| transform-origin    | 设置变换的原点                                               | 原点的坐标x, y或<br>left / right / top /bottom           |
| transform-style     | 让子元素处在一个3D空间内<br>需要给3D变换元素的父元素设置。   | flat: 默认值，处在平面空间。<br>preserve-3d： 开启3D空间 |
| perspective         | 设置景深<br>观察者到平面的距离。<br>需要给3D变换元素的父元素设置。 | 设置长度，不允许负值。                                   |
| perspective-origin  | 设置观察者位置<br>需要给3D变换元素的父元素设置。             | 设置观察点的坐标(x,y)或<br>left / right /top /bottom     |
| backface-visibility | 设置元素背面是否可见。                                       | visible:默认值，可见<br>hidden：不可见。                 |

> **transform-origin** 值的设置规则： 	
>
> **3D 变换注意事项：**
>
> 1. 必须给3D变换元素父元素设置 `transform-style 和 perspective`。
> 2. transform-style、perspective、perspective-origin、baceface-visibility 只能用于 3D 变换。
> 3. transform-style、perspective、perspective-origin 需要设置给父元素。



### 2D变换方法

#### translate

```
translateX()		设置水平方向位移的长度translateY()		设置垂直方向位移的长度translate()			同时设置水平和处置方向的位移长度，需要设置两个长度； 如果只有一个长度，只设置水平方向
```

```css
/* 设置水平方向位移 */transform: translateX(10px);/* 设置垂直方向位置 */transform: translateY(10px);/* 同时设置水平方向和垂直方向 */transform: translate(100px, -100px);
```

#### scale

```
scaleX()		设置水平方向缩放为原来的多少倍，值是个数字表示倍数。scaleY()        设置垂直方向缩放为原来的多少倍，值是个数字表示倍数。scale()			同时设置水平垂直方向的缩放倍数，需要指定两个倍数；如果只有一个倍数，表示水平和垂直都按照该倍数缩放
```

```css
/* 设置水平方向缩放 */transform: scaleX(.8);/* 设置垂直方向缩放 */transform: scaleY(1.3);/* 同时设置两个方向缩放 */transform: scale(1.2);transform: scale(.8, 1.5);
```

#### rotate

```
rotate()	设置旋转多少度，需要指定一个角度，单位是 deg
```

```css
transform: rotate(5deg);
```

### 3D变换的方法

#### 位移

```
translateZ()	设置元素沿z轴方向位置多少长度。translate3D()	同时设置沿x轴、y轴、z轴的移动距离，必须指定3个长度。
```

#### 缩放

```
scaleZ()		设置沿着Z轴缩放，目前无明显效果。scale3D()	    同时设置x轴，y轴，z轴的缩放倍数，指定三个倍数。
```

#### 旋转

```
rotateX()		沿着X轴旋转，指定角度rotateY()		沿着Y轴旋转，指定角度rotateZ()		沿着Z轴选项，指定角度；效果与2D旋转（rotate()）一致rotate3D()		设置沿多轴旋转，需要指定4个值
```

```css
 /* 沿着X轴旋转 */transform: rotateX(45deg);/* 沿着Y轴旋转 */transform: rotateY(45deg);/* 沿着Z轴旋转，效果与2D旋转一致 */transform: rotateZ(45deg);/* 同时设置沿着多个轴旋转 */transform: rotate3D(1,1,1,45deg);
```



## transition 过渡

### 过渡相关CSS属性

| CSS 属性名                 | 含义                    | 值                                                           |
| -------------------------- | ----------------------- | ------------------------------------------------------------ |
| transition-property        | 设置哪些css属性进行过渡 | 写需要过渡的CSS属性名<br>多个样式进行过渡都逗号隔开写多个<br>默认值是 all，表示发生变化的CSS属性，只要能过渡就过渡。 |
| transition-duration        | 设置过渡持续时间        | 时间单位有：s（秒）、ms（毫秒）                              |
| transition-delay           | 设置过渡延迟时间        | 时间单位有：s（秒）、ms（毫秒）                              |
| transition-timing-function | 设置过渡的运动轨迹      | ease： 默认值，平滑过渡<br>linear:  线性过渡（匀速）<br>ease-in：加速<br>ease-out：减速<br>ease-in-out：先加速后减速<br>steps(n, start/end)：分 n 步过渡变化<br>step-start： 等同于 steps(1, start)<br>区别:过渡开始时分布,,还是结束开始分布<br>step-end： 等同于 steps(1, end)<br>cubic-bezier( number, number, number, number)： 特定的贝塞尔曲线类型，4个数值需在[0, 1]区间内 |
| transition                 | 复合属性                | 同时设置子属性的值<br>如果包含一个时间表示 duration，包含两个时间分别是 duration、delay |

> **哪些 CSS 属性可以过渡？**
>
> 1. 值是长度或者数字的 CSS 属性可以过渡。如：width、height、border-width、padding、margin、z-index 等等。
> 2. 值是颜色的 CSS 属性可以过渡，如 color、background-color、border-color 等。
> 3. CSS3 的变换可以设置过渡效果。
>
> **贝塞尔曲线在线制作工具：**
>
> 地址：https://cubic-bezier.com/#.17,.67,.83,.67

### 触发过渡条件

#### 三伪类选择器

```css
:hover  :active   :focus  
```

#### js事件

#### 媒体查询@media



## 动画 animation



### 关键帧

```css
@keyframes 关键帧的名字 {
    form {		
    }	
    to 
    {		
    }
}

@keyframes 关键帧的名字 {	
    0% {		}	
    40% {		}	
    100% {		}
}

@keyframes 关键帧的名字 {	
    from {		}	
    40% {		}	
    80% {		}	
    to {		}
}
```



### 相关CSS属性

| CSS 属性名                | 含义                         | 值                                                           |
| ------------------------- | ---------------------------- | ------------------------------------------------------------ |
| animation-name            | 设置作用在元素上的关键帧动画 | 关键帧的名字，多个用逗号隔开                                 |
| animation-duration        | 设置动画的持续时间           | 时间单位：s 或者 ms                                          |
| animation-delay           | 设置动画开启前的延迟时间     | 时间单位：s 或者 ms                                          |
| animation-timing-function | 设置动画的运动轨迹           | 与 transition-timeing-function 值相同。                      |
| animation-iteration-count | 设置动画的执行次数           | 设置一个数字<br>设置关键字 infinite 表示无限次               |
| animation-direction       | 设置动画的运动方向           | nomral：默认值，正常方向<br>reverse：反方向运动<br>alternate：交替运动<br>alternate-reverse：反向交替运动 |
| animation-fill-mode       | 设置动画结束之后的状态       | none：没有状态，默认值<br>forwards：就动画结束时状态,常用<br>backwrads：变成动画开始时状态<br>both:随机forwards / backwrads |
| animation-play-state      | 设置动画的运动状态           | runing：默认值，动画运行<br>paused：暂停                     |
| animation                 | 复合属性                     | duration和delay有顺序要求<br>延迟后出现<br>其他子属性没有顺序和数量要求. |











## 多列布局

### 包裹元素设置

css

| CSS 属性名        | 含义                     | 值                                                           |
| ----------------- | ------------------------ | ------------------------------------------------------------ |
| column-count      | 指定分多少列             | 数字                                                         |
| column-width      | 指定列宽                 | 长度                                                         |
| columns           | 复合属性（coumnt和widh） | 数字和长度                                                   |
| column-gap        | 列间距                   | 长度                                                         |
| column-rule-width | 列之间的边框宽度         | 长度                                                         |
| column-rule-color | 列之间的边框颜色         | 颜色                                                         |
| column-rule-style | 列之间的边框风格         | 同 border-style                                              |
| column-rule       | 列之间的边框的复合属性   | width、color、style                                          |
| column-fill       | 所有列的高度是否统一     | auto： 列高度自适应内容 (默认)<br>balance： 所有列的高度以其中最高的一列统一 |

> **注意：**
>
> 1. 设置 column-count 和 column-width 都可以实现分列效果；如果二者同时设置可能会出现冲突，谁分出来的列数少就按照谁。
> 2. 推荐使用 column-count 进行分列。

### 子元素设置

| CSS 属性名                  | 含义                   | 值                                                           |
| --------------------------- | ---------------------- | ------------------------------------------------------------ |
| column-span                 | 设置是否跨越所有的列   | none：默认值，不跨列<br>all：跨所有列<br>还可开启BFC         |
| -webkit-column-break-before | 设置元素前面的断列方式 | auto：默认值，自动<br>always：强制前面断列<br>avoid：强制前面不断列 |
| -webkit-column-break-after  | 设置元素后面的断列方式 | auto：默认值，自动<br/>always：强制后面断列<br/>avoid：强制后面不断列 |
| -webkit-column-break-inside | 设置元素内部的断列方式 | auto：默认值，自动<br/>avoid：强制内部不断列                 |

![image-20210316102136337](CSS3/image-20210316102136337.png)















## 伸缩盒



>   铭哥教程
>
>   http://learn.fuming.site/front-end/Flex%E4%BC%B8%E7%BC%A9%E7%9B%92%E6%A8%A1%E5%9E%8B/%E6%96%B0%E7%89%88%E8%AF%AD%E6%B3%95.html

### 伸缩盒 / 伸缩项目

伸缩盒 / 伸缩子

**伸缩盒**

display:

```css
flex:块型 伸缩盒inline-flex:行内块型伸缩盒
```

**伸缩子**

伸缩容器子元素自动变伸缩项目。



### 主/副轴 水平&垂直



主 / 副 轴排列方向

**主轴：** 伸缩项目会沿着主轴排列，主轴默认         水平且从左到右。

**副轴：** 与主轴垂直的就是侧轴，     侧轴默认       垂直且从上到下。





#### 伸缩子排列方向

>   盒设置

**flex-direction** 属性可以设置主轴方向：

```
值：row				默认值，水平且从左到右row-reverse		水平从右到左column			垂直从上到下column-reverse	垂直从下到上
```





#### 副轴 (换行)

>   盒设置



**flex-wrap** 属性可以设置伸缩子换行方式：

```
值：nowrap			默认值，强制不换行wrap			自动换行wrap-reverse	换行且反转行的排列属性
```

#### flex-flow

**flex-flow** 属性可以同时设置主轴方向和换行方式，该属性是 **flex-direction** 和 **flex-wrap** 的复合属性，值没有数量和顺序要求。



### 伸缩子align样子

>   盒设置

伸缩子父元素排列方式



#### 主轴

**justify-content** 属性可以设置伸缩项目在主轴上的对齐方式：

```
值：flex-start			默认值，靠主轴起始位置对齐flex-end			靠主轴结束位置对齐center				居中对齐space-between		伸缩项目在主轴上均匀分布，两端没有间隙，中间有间隙。space-around		伸缩项目在主轴上均匀分布，两端的间隙是直接间隙的一半。space-evenly		伸缩项目在主轴上均匀分布，两端的间隙与中间的间隙一样。
```

#### 副轴

##### ① 一条主轴线（伸缩项目在主轴上不换行）

**align-items** 属性可以设置伸缩项目在侧轴上的对齐方式，主要用于只有一条主轴线的情况。laoda

```
值：stretch			默认值，伸缩项目在侧轴上拉伸。flex-start		靠侧轴开始位置对齐flex-end		靠侧轴结束位置对齐center			居中对齐baseline		文字基线对齐
```

##### ② 多条主轴线 （伸缩项目在主轴上发生换行）

**align-content** 属性可以设置伸缩项目在侧轴上的对齐方式，只能用于多条主轴的情况（伸缩项目发生了换行）

```
值：stretch			默认值，伸缩项目在侧轴上拉伸。flex-start		靠侧轴开始位置对齐flex-end		靠侧轴结束位置对齐center			居中对齐space-between	在侧轴方向上，两端没有间隙，中间有间隙。space-around	在侧轴方向上，两端的空隙是中间空隙的一半。space-enenly	在侧轴方向上，两端的空隙与中间空隙一样。
```

> **注意：** 
>
> 1. **align-items** 在一条主轴或多条主轴设置对齐方式都会生效，但是我们只有在一条主轴的情况下使用该属性。
> 2. **align-content** 只有多条主轴线的情况下才生效。

```css
当伸缩容器的侧轴还有多余空间时，本属性可以用来调准「伸缩行」在伸缩容器里的对齐方式，这与调准伸缩项目在主轴上对齐方式的 <' [justify-content](justify-content.htm) '>  属性类似。请注意本属性在只有一行的伸缩容器上没有效果
```



#### 单个



单个伸缩子居中

![image-20210316144755630](CSS3/image-20210316144755630.png)

### 伸缩子伸缩性

>   伸缩子设

#### ① 伸缩项目在主轴上的默认长度 flex-basis

若没有设置该属性(默认)，伸缩项目在主轴上的长度就是 width的值 或者 height的值

#### ② 扩展比率 flex-grow

伸缩项目发生扩展的前提： 伸缩容器在主轴方向上有富余的空间。

伸缩项目默认的扩展比率是 0。

伸缩项目在扩展的时候，按照各自的扩展比率瓜分伸缩容器的富余空间。

#### ③ 收缩比率 flex-shrink

伸缩项目发生收缩的前提：伸缩容器在主轴方向上的长度不够（小于伸缩项目在主轴上的长度的和）

伸缩项目默认的收缩比率是 1。

伸缩项目在收缩的时候，每个伸缩项目要补一部分伸缩容器的亏空，补多少既考虑自己原本的长度也考虑收缩比率。



伸缩计算公式

**伸**

按比例分配

**缩**

![image-20210316152913916](CSS3/image-20210316152913916.png)

![image-20210316153318658](CSS3/image-20210316153318658.png)





#### ④ flex 复合属性

先grow,后shrik(能申能屈kgaf;;)

```css
flex: grow shrink basis;
```

复合数的简写：

```css
flex: 1;  	 /* flex: 1 1 0 ,伸缩比率虽然都为1,但他们依赖的flex-basic为零,所以既不伸也不缩*/ 
flex: auto;  /* flex: 1 1 auto ,伸缩比率都为1,且他们依赖的flex-basic为1,所以会根据富裕空间或溢出空间伸缩*/
flex: none;  /* flex: 0 0 auto ,既不伸也不*/ 
flex: 0 auto;  /* flex: 0 1 auto ,只会收缩*/
```



### order伸缩子排序

```css
给伸缩项目设置属性 **order** 可以调整伸缩项目排列属性。 **order** 属性的值是数字，值越小排序越靠前，可以是负数。
```



### 单设副轴align

```css
给伸缩项目设置属性 **align-self**，可以单独设置该伸缩项目在侧轴上的对齐方式，属性的值与 align-items 一样。
```

### `铭总结`

#### ① 设置给伸缩容器属性

>   容器设置

| CSS 属性名       | 含义                                                         | 值                                                           |
| ---------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |
| display          | 设置显示模式                                                 | flex: 设置为伸缩容器<br>inline-flex：设置为行内的伸缩容器    |
| `flex-direction` | 设置主轴方向(`伸缩子沿主轴指定方向顺序排列`)                 | row：默认值，水平从左到右<br>row-reverse：水平从右到左<br>column：垂直从上到下<br>column-reverse：垂直从下到上 |
| `flex-wrap`      | 设置换行方式                                                 | nowrap：默认值，不换行<br>wrap：自动换行<br>wrap-reverse：自动换行且反转排列 |
| flex-flow        | 复合属性<br>复合 主轴方向和换行方式                          |                                                              |
| justify-content  | 伸缩项目在主轴上的对齐方式                                   | flex-start：靠主轴起始位置<br>flex-end：靠主轴结束位置<br>center：居中<br>space-between： 两端没有间隙，中间有间隙<br>space-around：两端的间隙是中间间隙的一半<br>space-evenly：两端间隙与中间间隙一样 |
| align-items      | 伸缩项目在侧轴上的对齐方式<br/>一条主轴线<br/>对每个伸缩项目生效 | stretch：默认值，拉伸<br>flex-start：靠侧轴其实位置<br>flex-end：靠侧轴结束位置<br>center：居中<br>baseline：文字基线对齐. |
| align-content    | 伸缩项目在侧轴上的对齐方式<br/>只适用多条主轴线<br/>将全部伸缩项目作为一个整体,对其设置生效 | stretch：默认值，拉伸<br/>flex-start：靠侧轴其实位置<br/>flex-end：靠侧轴结束位置<br/>center：居中<br/>space-between： 两端没有间隙，中间有间隙<br/>space-around：两端的间隙是中间间隙的一半<br/>space-evenly：两端间隙与中间间隙一样 |

#### ② 设置给伸缩项目属性

>   孩子设置

| CSS 属性名    | 含义                               | 值                                                           |
| ------------- | ---------------------------------- | ------------------------------------------------------------ |
| `flex-basis`  | 设置伸缩项目在主轴上的长度         | 长度<br>默认值是 auto                                        |
| `flex-grow`   | 设置扩展比率                       | 数字，默认是 0.                                              |
| `flex-shrink` | 设置收缩比例                       | 数字，默认是 1                                               |
| `flex`        | 复合属性，复合 basis、grow、shrink | flex: 1;  <br>代表<br>flex: 1 1 0 ,伸缩比率虽然都为1,但他们依赖的flex-basic为零,所以既不伸也不缩<br><br>flex: auto;  <br>flex: 1 1 auto ,伸缩比率都为1,且他们依赖的flex-basic为1,所以会根据富裕空间或溢出空间伸缩<br><br>flex: none;  <br/> flex: 0 0 auto ,既不伸也不 <br><br/>flex: 0 auto;  <br/> flex: 0 1 auto ,只会收缩 |
| order         | 设置伸缩项目排序顺序               | 数字                                                         |
| align-self    | 单独设置伸缩项目在侧轴上对齐方式   | auto： 默认值<br>stretch：拉伸<br/>flex-start：靠侧轴其实位置<br/>flex-end：靠侧轴结束位置<br/>center：居中<br/>baseline：文字基线对齐. |









## 媒体查询/响应式



### 视口 viewport

#### ① 什么是视口

* 视口是用户页面的可视区域。
* 视口是页面的初始包含块，是根元素的包含块。

#### ② 移动端视口和PC端视口

* PC端浏览器视口大小可以调整，调整浏览器窗口大小或者打开浏览器调试工具都会影响视口的大小。
* 移动端视口无法调整（有些手机支持分屏或者画中画，此时浏览器视口大小也改变了）

#### ③ 完美视口设置

**完美视口：** 视口的宽度与设备的宽度保持一致，此时就称为完美视口。

PC 端的视口本来就是完美视口。

移动端浏览器默认并不是完美视口，因为历史元素，浏览器视口不论设备宽度是多少，视口一般宽度一般会按照 980px 显示。

通过设置 meta 元信息，可以设置移动端浏览器为完美视口：

```css
<meta name="viewport" content="width=device-width, initial-scale=1.0">
```

开发网页无需考虑物理像素,图片缩放只为更清晰

###  媒体查询



#### ① 媒体类型

```
all				表示所有的设备screen		表示屏幕，包括电脑屏幕、手机屏幕、平板屏幕、电视屏幕、车载屏幕等等print			表示打印机(打印机看到样子)speech		表示屏幕阅读器，无障碍阅读设置(听到样子)
```

#### ② 媒体特性

```
width			视口宽度max-width		视口最大宽度min-width		视口最小宽度device-width		设备宽度max-device-width	最大设备宽度min-device-width	最小设备宽度
```

> **注意：** width 和 device-width 主要在PC端有区别，在移动端其实没有区别。

#### ③ 运算符

```
and			并且,			或者not			排除，只能用于媒体类型only		只能用于媒体类型
```

#### ④示例

##### **写在style里**

```css
/* 设置样式  视口宽度大于等于 600px 并且 小于等于 1000px */@media (min-width: 600px) and (max-width: 1000px) {    } /* 设置样式 视口宽度小于等于 300 或者 视口宽度大于等于 1200 */@media (max-width: 300px),(min-width: 1200px) {}/* 设置样式，除了屏幕其他设备都生效 */@media not screen {}@media only screen and (min-width: 768px) {}
```

##### **link引入**

根据不同的媒体查询条件，加载不同的 CSS 样式文件。

```css
 <link rel="stylesheet" href="screen.css" media="screen"> <link rel="stylesheet" href="print.css" media="print">
```



### 响应式布局

#### ① 阈值（断点）

#### ② 移动优先方案（媒体查询的设置）



## BFC

### 3.1 什么是 BFC

**Block Formatting Context** 简称 **BFC**，中文翻译为 **块级格式上下文**。

#### ① W3C 中对 BFC 的定义

Floats, absolutely positioned elements, block containers (such as inline-blocks, table-cells, and table-captions) that are not block boxes, and block boxes with 'overflow' other than 'visible' (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.

> **译文：**
>
> 浮动、绝对定位元素、不是块盒子的块容器(如inline-blocks、table-cells和table-captions)，以及`overflow`属性的值除`visible`以外的块盒(除非该值已传播到视口)，将为其内容建立新的块格式化上下文。

https://www.w3.org/TR/CSS22/visuren.html#block-formatting

#### ② MDN 上对 BFC 的定义

A **block formatting context** is a part of a visual CSS rendering of a web page. It's the region in which the layout of block boxes occurs and in which floats interact with other elements.

> **译文：**
>
> **块格式化上下文（Block Formatting Context，BFC）** 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。

https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context

https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context

#### ③ 到底什么是 BFC 

首先，BFC 的意思是 **Block Formatting Context** ，即**块级格式上下文**。 然后，当元素满足了某些条件，我们认为该元素创建了 **BFC**。 创建了 BFC 的元素我们可以把他看做是一个独立的容器，容器内的元素不论如何布局都不会影响到外面。

### 3.2 创建 BFC 的方式

- 根元素。
- 浮动元素。
- 绝对定位或固定定位的元素。
- 行内块元素。
- 表格单元格（th、td）、表格行（tr）、表格标题（caption）、table、thead、tbody、tfoot。
- `overflow` 的值不为 `visible` 的块元素。
- 伸缩项目。
- 多列容器。
- `column-span` :`all` 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中。

### 3.3 创建 BFC 可以解决的问题

#### ① 清除子元素浮动的影响

给浮动元素的父元素创建 BFC，清除掉子元素浮动的影响。

#### ② 解决外边距塌陷

给父元素创建 BFC，第一个和最后一个子元素的外边距不会塌陷。

#### ③ 4 margin 合并

margin 合并发生在兄弟块级元素之间，上下的外边距会合并。

但是，行内块元素、浮动的元素、伸缩项目上下外边距并不会合并。











## 探究px

### 问题

#### 1 什么是物理像素

px,physic pixel ,物理像素点 ,一个像素点由三原色组成

#### 2 什么是逻辑像素

pt,logic point ,逻辑像素点 , 应该是电脑模拟的…

#### 3 什么是分辨率

单位面积内包含的(物理)像素数量。

#### 4 为什么分辨率越高 , 图像越清晰

结论就是这样.

两张相同大小图片,

第一张只有一个像素点 , 只能呈现一种颜色 , 看个寂寞呢

第二张有很多个像素点 , 每个像素点能呈现不同的颜色 , 各自分布 ,所以所谓图片就是不同颜色的各自分布 , 对吧 .

#### 5 如何把电脑上宽1000px , 高2000px 的大图 呈现 在 宽750px , 高1024px 的手机上

大图要缩小吧 

缩小比例 = 手机框 / 大图宽 

缩小后也就意味大图在手机上的分辨率 < 电脑上的分辨率(多的像素点装不下 , 只能按比例扔掉 , 但由于图片缩小 , 所以看起来还是清晰) 

#### 6 是否知道设备物理像素不会变

知道了

#### 7 如何放大图片

发大图片 , 你距离图片越近是不是感觉图片越大 , 

所以在电脑上放大图片 , 就是把像素点 ,放大 ,

然后就有css像素点的概念 , 一个css像素通过占用多个物理像素来表现自己的颜色 ,感觉就放大了 ,当然分辨率也会下降了

变得模糊

也就有了像素比的概念 , 一个css像素占据多少个物理像素

#### 8 是否知道像素点是正方形

知道了

#### 9 为什么用750px设计稿



https://blog.csdn.net/liguoyin1/article/details/74898124?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328680.27408.16162522205045525&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control































































